/* *****************************************************************************
   NHS Infrastructure — Map View
***************************************************************************** */

/* ---------- Tokens */
:root{
  --bg:            #f8fafc;            /* page background */
  --panel:         #ffffff;             /* cards / panels */
  --text:          #0f172a;             /* slate-900 */
  --muted:         #334155;             /* slate-700 */
  --border:        #e5e7eb;             /* gray-200 */
  --primary:       #2563eb;             /* blue-600 */
  --primary-600:   #2563eb;
  --primary-700:   #1d4ed8;
  --sidebar-bg:    #0b1220;             /* deep navy */
  --sidebar-fg:    #cbd5e1;             /* slate-300 */
  --sidebar-muted: #94a3b8;             /* slate-400 */
  --sidebar-hover: rgba(148,163,184,0.12);
  --radius:        12px;
  --shadow:        0 1px 2px rgba(0,0,0,.06), 0 8px 24px rgba(15,23,42,.08);
  
}

*{ box-sizing: border-box; }
html, body { height: 100%; }
body{
  margin: 0;
  font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif;
  color: var(--text);
  background: var(--bg);
}

/* ---------- App frame */
.app-container{ display:flex; flex-direction:column; min-height:100vh; width:100%; }

/* Top bar */
.title-bar{
  height:64px;
  background:#fff;
  border-bottom:1px solid var(--border);
  display:flex;
  align-items:center;
  justify-content:space-between;
  padding:0 16px;
  gap:12px;
}
.title-bar h1{
  font-size:18px; font-weight:600; margin:0; letter-spacing:.2px;
}

/* top bar right side (search and actions) */
.controls-row{ margin-left:auto; display:flex; align-items:center; gap:10px; }
.search{
  position:relative; display:flex; align-items:center;
  background:#f1f5f9; border:1px solid var(--border); border-radius:999px; padding:0 12px;
}

/* Search stations controls - flexible and responsive */
.search-stations-controls {
  display: flex;
  align-items: center;
  gap: 8px;
  flex: 1;
  max-width: 600px;
  min-width: 200px;
  margin: 0 20px;
}

.search-stations {
  position: relative;
  display: flex;
  align-items: center;
  background: #f1f5f9;
  border: 1px solid var(--border);
  border-radius: 999px;
  padding: 0 12px;
  overflow: hidden;
  width: 100%;
  min-width: 200px;
}

.search-stations input {
  height: 36px;
  width: 100%;
  flex: 1;
  border: 0;
  outline: 0;
  background: transparent;
  color: var(--text);
  font-size: 14px;
  padding-right: 8px;
  min-width: 0; /* Important for flex shrinking */
}

.search-stations input::placeholder {
  color: #64748b;
  opacity: 1;
}

/* Search and clear buttons */
.search-btn,
.clear-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border: none;
  border-radius: 50%;
  background: transparent;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
  margin-left: 4px;
}

.search-btn:hover {
  background: #e2e8f0;
  color: #3b82f6;
  transform: scale(1.05);
}

.clear-btn:hover {
  background: #fee2e2;
  color: #dc2626;
  transform: scale(1.05);
}

.search-btn:active,
.clear-btn:active {
  transform: scale(0.95);
}

/* Focus states */
.search-stations input:focus {
  outline: none;
}

.search-stations:focus-within {
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Button icon styling */
.search-btn svg,
.clear-btn svg {
  stroke-width: 2.5;
}

/* Responsive adjustments for different screen sizes */
@media (max-width: 1200px) {
  .search-stations-controls {
    max-width: 500px;
    margin: 0 15px;
  }
}

@media (max-width: 900px) {
  .search-stations-controls {
    max-width: 400px;
    margin: 0 10px;
  }
  
  .search-stations input {
    font-size: 13px;
  }
}

@media (max-width: 768px) {
  .search-stations-controls {
    max-width: 300px;
    margin: 0 8px;
    min-width: 150px;
  }
  
  .search-stations input {
    font-size: 12px;
  }
  
  .search-btn,
  .clear-btn {
    width: 28px;
    height: 28px;
  }
  
  .search-btn svg,
  .clear-btn svg {
    width: 14px;
    height: 14px;
  }
}

@media (max-width: 600px) {
  .search-stations-controls {
    max-width: 250px;
    margin: 0 5px;
    min-width: 120px;
  }
  
  .search-stations {
    min-width: 120px;
  }
  
  .search-stations input {
    font-size: 11px;
  }
  
  .search-btn,
  .clear-btn {
    width: 24px;
    height: 24px;
    margin-left: 2px;
  }
  
  .search-btn svg,
  .clear-btn svg {
    width: 12px;
    height: 12px;
  }
}

/* Ensure the toolbar layout is flexible */
.list-toolbar {
  display: flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  gap: 10px;
  flex-wrap: nowrap;
  margin-bottom: 0.5rem !important;
}

/* Make sure the badge doesn't take up too much space */
.badge {
  flex-shrink: 0;
  white-space: nowrap;
}

/* Remove any conflicting search assets styles */
.search {
  display: none !important; /* Hide old search assets */
}

.controls-row {
  display: none !important; /* Hide old controls row */
}

.btn, .dropbtn{
  height:36px; padding:0 12px; border-radius:8px;
  border:1px solid var(--border); background:#fff; color:var(--text);
  font-weight:500; cursor:pointer;
}
.btn.primary{ background:var(--primary); color:#fff; border-color:var(--primary); }
.btn.primary:hover{ background:var(--primary-700); }

/* ---------- Main layout: left nav / content / right panel */
.main-view-wrapper{ flex:1; display:flex; width:100%; min-width:0; }
.main-content{
  display:grid;
  /* Use CSS vars so we can collapse columns smoothly */
  grid-template-columns: var(--left-col, 260px) 1fr var(--right-col, 380px);
  grid-template-rows: 1fr;
  height: calc(100vh - 64px);
  width: 100%;
  min-width: 0; /* allow center column to actually shrink/grow */
  position: relative; /* for edge handles */
  transition: grid-template-columns .25s ease;
}

/* Collapsed states */
.main-content.left-collapsed  { --left-col: 0px; }
.main-content.right-collapsed { --right-col: 0px; }

/* ensure all ancestors have height so #map:height:100% is meaningful */
html, body, .app-container, .main-view-wrapper, .main-content { min-height: 100vh; }

/* Left NAV */
.left-panel{
  grid-column:1;
  background:var(--sidebar-bg);
  color:var(--sidebar-fg);
  padding:16px 12px 14px;
  display:flex; flex-direction:column; gap:18px;
  min-width: 260px;
}

.edge-toggle{
  position:absolute;
  top:50%;
  width:24px;
  height:48px;
  display:flex;
  align-items:center;
  justify-content:center;
  font-size:16px;
  line-height:1;
  background:#fff;
  color:#111827;
  border:1px solid var(--border);
  border-radius:10px;
  box-shadow: var(--shadow);
  cursor:pointer;
  z-index: 10; /* above map/panels */
  user-select:none;
}
/* Left handle sits on the right edge of the left column */
.edge-toggle.left{
  left: var(--left-col, 260px);
  transform: translate(-50%, -50%);
}
/* When left is collapsed, pin it to the viewport edge */
.main-content.left-collapsed .edge-toggle.left{
  left: 0;
  transform: translate(0, -50%);
}
/* Right handle sits on the left edge of the right column */
.edge-toggle.right{
  right: var(--right-col, 380px);
  transform: translate(50%, -50%);
}
.main-content.right-collapsed .edge-toggle.right{
  right: 0;
  transform: translate(0, -50%);
}

.left-panel .brand{
  font-weight:700; color:#fff; font-size:16px; padding:6px 8px 2px;
}
.nav-section{ display:flex; flex-direction:column; gap:8px; }
.nav-section h2{
  color:#cbd5e1; opacity:.7; font-size:11px; margin:0 8px 2px;
  text-transform:uppercase; letter-spacing:.08em;
}
.nav-divider{ height:1px; background:rgba(148,163,184,.15); margin:8px 0; }
.nav-block{ padding:6px 6px 8px; border-radius:12px; }
.nav-block--ghost{ background:transparent; }
.nav-block--soft{ background:rgba(255,255,255,.02); border:1px solid rgba(148,163,184,.08); }
.nav-list{ list-style:none; margin:0; padding:0; display:flex; flex-direction:column; gap:6px; }
.nav-item{
  display:flex; align-items:center; gap:10px;
  color:var(--sidebar-muted);
  padding:10px 12px; border-radius:10px; cursor:pointer;
  transition:background .15s ease, color .15s ease;
}
.nav-item:hover{ background:var(--sidebar-hover); color:#e2e8f0; }
.nav-item.active{ background:var(--sidebar-hover); color:#fff; }
.left-panel .footer{ margin-top:auto; padding-top:10px; }

/* ACTIONS section: make “+ New Company” feel like a primary action */
#navNewCompany{
  display:block; width:100%;
  background:rgba(99,102,241,.15);
  color:#e0e7ff;
  border:1px solid rgba(99,102,241,.25);
  border-radius:10px;
  padding:10px 12px;
  font-weight:700;
}
#navNewCompany:hover{ background:rgba(99,102,241,.25); color:#fff; }

.main-content.left-collapsed .left-panel{
  /* Hide visually and from hit-testing when collapsed */
  width:0 !important; min-width:0 !important; padding:0 !important; margin:0 !important;
  border:0 !important; overflow:hidden !important; visibility:hidden; pointer-events:none;
}
.main-content.right-collapsed .right-panel{
  width:0 !important; min-width:0 !important; padding:0 !important; margin:0 !important;
  border:0 !important; overflow:hidden !important; visibility:hidden; pointer-events:none;
}

/* ---------- Map column */
.map-container{
  grid-column:2;
  position:relative;
  background:#fff;
  border-right:1px solid var(--border);
  /* critical guards vs 0-width */
  min-width: 400px;
  width: 100%;
  height: 100%;
  overflow: hidden;
}
#map{
  position:absolute;
  inset:0;
  width:100%;
  height:100%;
  min-height:300px;
  z-index:1;
}

/* Leaflet tweaks to match clean style */
.leaflet-container{ font: inherit; }
.leaflet-container img { max-width: none !important; }
.leaflet-control-zoom a{
  border-radius:10px !important;
  box-shadow: var(--shadow);
}
.leaflet-popup-content-wrapper, .leaflet-popup-tip{
  border-radius:10px; box-shadow: var(--shadow);
}

/* marker dot used by map_view.js */
.marker-dot{
  display:inline-block; width:12px; height:12px; border-radius:50%;
  background: var(--marker-color, #4b5563);
  border:2px solid #fff; box-shadow:0 0 0 1px rgba(0,0,0,.25);
}

/* ---------- Right details panel */
.right-panel{
  grid-column:3;
  background:var(--panel);
  border-left:1px solid var(--border);
  padding:16px;
  overflow:auto;
  min-width:380px;
}
.right-panel h2{ margin:0 0 8px; font-size:16px; font-weight:600; }
.station-toolbar{ display:flex; justify-content:flex-end; gap:8px; margin-bottom:10px; }

/* chips */
.chips{ display:flex; gap:8px; flex-wrap:wrap; margin:4px 0 10px; }
.chip{
  display:inline-flex; align-items:center; gap:6px;
  font-size:12px; font-weight:600; padding:4px 10px; border-radius:999px;
}
.chip.green{ background:#e8f5e9; color:#1b5e20; }
.chip.gray { background:#eef2f7; color:#334155; }

/* section cards */
.station-section{
  background:#fff; border:1px solid var(--border); border-radius:var(--radius);
  box-shadow: var(--shadow);
  margin:12px 0; overflow:hidden;
}
.station-section h3{
  margin:0; padding:12px 14px; background:#f8fafc; border-bottom:1px solid var(--border);
  font-size:14px; font-weight:600;
}
.station-section table{ width:100%; border-collapse:collapse; }
.station-section th, .station-section td{
  text-align:left; font-size:13px; padding:9px 14px; border-bottom:1px solid var(--border);
}
.station-section tr:last-child th, .station-section tr:last-child td{ border-bottom:0; }

.actions{ display:flex; gap:8px; margin-top:12px; }
.actions .btn{ height:38px; padding:0 14px; }

/* ---------- Filter Drawer */
.filter-drawer{
  position:fixed; top:64px; right:-360px; width:360px;
  height:calc(100vh - 64px);
  background:#fff; border-left:1px solid var(--border);
  box-shadow: var(--shadow);
  transition:right .25s ease;
  padding:12px; overflow:auto; z-index:50;
}
.filter-drawer.open{ right:0; }
.filter-drawer h3{ margin:6px 6px 10px; font-size:14px; }

/* ---------- Hide legacy UI bits */
#btnDataNuke{ position:fixed; bottom:10px; left:10px; width:10px; height:10px; opacity:.05; border:0; background:transparent; }

/* ---------- Small helpers */
.dropdown, .dropdown-content{ display:none; }
a { color: inherit; text-decoration: none; }
/* ===== Add-Infra Wizard (Create Company / Project / Assets) ===== */
/* Make the injected wizard container occupy the full content area
   (everything except the left sidebar column). Assumes .main-content
   is a 3-col grid: [left-nav][main][right-panel]. */
#addInfraContainer {
  grid-column: 2 / 4;   /* center and right columns */
  width: 100%;
  height: 100%;
  display: none;        /* shown by JS when the wizard opens */
}
.wizard-container {
  display: flex;
  flex-direction: column;
  gap: 16px;
  padding: 12px 16px 20px;
  background: #f7f8fb;
  width: 100%;
  min-height: calc(100vh - 0px);
}
.wizard-header {
  background: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 14px 18px;
  margin: 0;
}
.wizard-steps {
  display: flex;
  list-style: none;
  gap: 34px;
  align-items: center;
  margin: 0;
  padding: 0;
}
.wizard-steps .step {
  display: flex;
  align-items: center;
  gap: 10px;
  color: #6b7280;
  font-weight: 600;
}
.wizard-steps .step .step-dot {
  width: 28px; height: 28px; border-radius: 50%;
  border: 2px solid #d1d5db;
  display: inline-flex; align-items: center; justify-content: center;
  font-size: 14px; font-weight: 700;
  background: #fff;
}
.wizard-steps .step.active .step-dot {
  border-color: #10b981; color: #10b981;
}
.wizard-steps .step.done .step-dot {
  background: #10b981; color: #fff; border-color: #10b981;
}
.wizard-steps .step.active span:last-child { color: #111827; }

.wizard-body {
  background: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 18px 18px 10px;
  margin-top: 8px;
}
.wizard-step { display: none; }
.wizard-step.active { display: block; }
.wizard-step h3 { margin: 0 0 18px 0; font-size: 18px; }

.form-row { display: flex; flex-direction: column; margin-bottom: 16px; }
.form-row label { font-size: 14px; color: #374151; margin-bottom: 8px; }
.form-row input[type="text"],
.form-row input[type="email"],
.form-row input[type="number"],
.form-row textarea,
.form-row select {
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  padding: 10px 12px;
  font-size: 14px;
  background: #fff;
}
.form-row textarea { resize: vertical; }

.filepicker {
  position: relative;
  display: inline-flex;
  align-items: center;
  border: 1px dashed #d1d5db;
  border-radius: 6px;
  padding: 10px 12px;
  cursor: pointer;
  gap: 8px;
  width: 340px;
}
.filepicker input[type="file"] {
  position: absolute; inset: 0;
  opacity: 0; cursor: pointer;
}
#projectExcelLabel { color:#111827; }

.card {
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 12px;
  margin-bottom: 16px;
  background:#fff;
}
.card-title { font-weight: 600; margin-bottom: 10px; }
.checklist { display: grid; gap: 10px; }
.chk { display: flex; align-items: center; gap: 8px; color:#111827; }
.chk input[type="checkbox"]:disabled  span { opacity:.6; }

.wizard-footer {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}
.btn {
  appearance: none;
  border: 1px solid #d1d5db;
  background: #fff; color: #111827;
  padding: 8px 14px;
  border-radius: 6px;
  font-weight: 600; cursor: pointer;
}
.btn:disabled { opacity:.5; cursor: default; }
.btn-ghost { background:#f3f4f6; }
.btn-primary {
  border-color: #10b981;
  background: #10b981;
  color: #fff;
}


/* ──────────────────────────────────────────────────────────────────────────
   Filter Tree (dark LHS) — Company ▸ Location ▸ Asset Types
   ────────────────────────────────────────────────────────────────────────── */
#filterTree{ padding:.25rem 4px .5rem; }
#filterTree .ft-row{
  display:flex; align-items:center; gap:.5rem;
  padding:4px 6px; border-radius:.5rem;
  min-height:28px;                         /* <-- consistent row height */
}
#filterTree .ft-row:hover{ background: rgba(148,163,184,0.12); }
#filterTree .ft-label{ display:flex; align-items:center; gap:.5rem; cursor:pointer; color:var(--sidebar-fg); }
#filterTree input.filter-checkbox{
  accent-color:#60a5fa; width:14px; height:14px;
}
#filterTree details{ border-left: 2px solid rgba(148,163,184,.18); padding-left:.5rem; margin-left:.25rem; }
#filterTree .ft-children{ margin-left:.5rem; }
#filterTree summary{
  list-style:none; cursor:pointer; color:var(--sidebar-fg);
  display:flex; align-items:center; gap:.5rem;   /* <-- match ft-row */
  padding:4px 6px; border-radius:.5rem;
  min-height:28px;                               /* <-- same height */
}
#filterTree summary::-webkit-details-marker{ display:none; }
#filterTree summary::before{
  content:'▸'; display:inline-block; margin-right:.35rem; color:#94a3b8;
  transform:none;                                  /* <-- centers the caret */
}
#filterTree details[open] > summary::before{ content:'▾'; }
#filterTree .ft-empty{ padding:.6rem; opacity:.8; font-style:italic; color:#94a3b8; }

/* Right-aligned row actions in the tree */
#filterTree .ft-actions{
  display:flex; align-items:center; gap:8px;
  margin-left:auto;                              /* <-- push to far right */
}
#filterTree .ft-actions .btn,
#filterTree .ft-actions button{
  height:28px; min-width:28px; padding:0 8px;     /* <-- same vertical box as row */
  border-radius:8px; border:1px solid rgba(148,163,184,.18);
  background:rgba(255,255,255,.04); color:#cbd5e1; cursor:pointer;
  display:inline-flex; align-items:center; justify-content:center;
}
#filterTree .ft-actions .btn:hover,
#filterTree .ft-actions button:hover{ background:rgba(255,255,255,.08); color:#fff; }

/* Remove visibility “eye” controls entirely */
#filterTree .ft-actions .btn-eye,
#filterTree .ft-row .btn-eye,
#filterTree .ft-row .icon-eye,
#filterTree .ft-row [data-action="toggle-visibility"],
#filterTree .ft-row button[aria-label*="Visibility"],
#filterTree .ft-row button[title*="Visibility"],
#filterTree .ft-row button[title^="Show"],
#filterTree .ft-row button[title^="Hide"]{
  display:none !important;
}

/* ─── Excel boot overlay ────────────────────────────────────────────── */
.boot-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,.45);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999999;
}
.boot-card {
  background: #f3f4f6;
  border-radius: 12px;
  padding: 16px 18px;
  width: min(480px, 92vw);
  box-shadow: 0 10px 30px rgba(0,0,0,.2);
  font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
}
.boot-title { font-weight: 700; margin: 0 0 8px; font-size: 15px; color: #111827; }
.boot-status { margin: 0 0 10px; font-size: 13px; color: #374151; }
.boot-bar {
  background: #d1d5db;
  height: 10px;
  border-radius: 999px;
  overflow: hidden;
}
.boot-bar-fill {
  width: 0%;
  height: 100%;
  background: linear-gradient(90deg, #10b981, #22c55e);
  transition: width .25s ease;
}
.boot-hidden { display: none !important; }

/* ============================
   List View (scoped styling)
   ============================ */

/* Container fills the center column and stacks toolbar and table */
.list-container {
  /* ensure it occupies the center grid column like the map does */
  grid-column: 2;
  display: block;      /* JS toggles this between none/block */
  flex: 1 1 auto;
  min-width: 0;        /* prevent flex overflow */
  overflow: hidden;
  background: #f8fafc; /* slate-50 */
  border-left: 1px solid #e5e7eb; /* gray-200 */
}

@media (prefers-color-scheme: dark) {
  .list-container {
    background: #0b1220;           /* deep navy */
    border-left-color: #1f2937;    /* gray-800 */
  }
}

/* Inner layout */
.list-container .list-view {
  height: 100%;
  display: flex;
  flex-direction: column;
  padding: 12px;
  gap: 10px;
}

/* Toolbar */
.list-container .list-toolbar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 12px;
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  box-shadow: 0 1px 2px rgba(16,24,40,.06);
}

.list-container .list-toolbar h2 {
  font-size: 14px;
  line-height: 1.2;
  margin: 0;
  color: #111827; /* gray-900 */
}

@media (prefers-color-scheme: dark) {
  .list-container .list-toolbar {
    background: #0f172a;      /* slate-900 */
    border-color: #1f2937;    /* gray-800 */
    box-shadow: inset 0 0 0 1px rgba(255,255,255,0.02);
  }
  .list-container .list-toolbar h2 {
    color: #e5e7eb;           /* gray-200 */
  }
}

/* Scroll wrapper for the table */
.list-container .table-scroll {
  flex: 1 1 auto;
  overflow: auto;
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(16,24,40,.05);
}

@media (prefers-color-scheme: dark) {
  .list-container .table-scroll {
    background: #0f172a;
    border-color: #1f2937;
    box-shadow: inset 0 0 0 1px rgba(255,255,255,0.02);
  }
}

/* Table base */
.list-container .data-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  font-size: 14px;
}

/* Sticky header with subtle backdrop */
.list-container .data-table thead th {
  position: sticky;
  top: 0;
  z-index: 1;
  text-align: left;
  font-weight: 600;
  letter-spacing: .01em;
  padding: 10px 12px;
  background: linear-gradient(to bottom, rgba(248,250,252,1), rgba(248,250,252,.92));
  border-bottom: 1px solid #e5e7eb;
  backdrop-filter: saturate(140%) blur(4px);
  white-space: nowrap;
  cursor: pointer; /* clickable for sorting */
}

.list-container .data-table thead th:first-child {
  border-top-left-radius: 12px;
}
.list-container .data-table thead th:last-child {
  border-top-right-radius: 12px;
}

@media (prefers-color-scheme: dark) {
  .list-container .data-table thead th {
    background: linear-gradient(to bottom, rgba(15,23,42,1), rgba(15,23,42,.92));
    border-bottom-color: #1f2937;
    color: #e5e7eb;
  }
}

/* Row cells */
.list-container .data-table tbody td {
  padding: 10px 12px;
  border-bottom: 1px solid #f1f5f9; /* slate-100 */
  color: #111827;
  vertical-align: middle;
}

@media (prefers-color-scheme: dark) {
  .list-container .data-table tbody td {
    border-bottom-color: #1f2937;
    color: #e5e7eb;
  }
}

/* Zebra striping */
.list-container .data-table tbody tr:nth-child(even) td {
  background: #fafcff; /* subtle blue-tint */
}
@media (prefers-color-scheme: dark) {
  .list-container .data-table tbody tr:nth-child(even) td {
    background: #0b1326;  /* very subtle tint in dark */
  }
}

/* Hover highlight and left accent bar */
.list-container .data-table tbody tr {
  transition: background-color .12s ease, box-shadow .12s ease;
}
.list-container .data-table tbody tr:hover td {
  background: #eef6ff; /* light blue */
}
.list-container .data-table tbody tr:hover td:first-child {
  box-shadow: inset 3px 0 0 0 #3b82f6; /* blue-500 accent bar */
}

@media (prefers-color-scheme: dark) {
  .list-container .data-table tbody tr:hover td {
    background: #0c1a33;
  }
  .list-container .data-table tbody tr:hover td:first-child {
    box-shadow: inset 3px 0 0 0 #60a5fa; /* blue-400 */
  }
}

/* Compact numeric formatting for lat/lon cells */
.list-container .data-table tbody td:nth-child(5),
.list-container .data-table tbody td:nth-child(6) {
  font-variant-numeric: tabular-nums;
  white-space: nowrap;
  color: #334155; /* slate-700 */
}
@media (prefers-color-scheme: dark) {
  .list-container .data-table tbody td:nth-child(5),
  .list-container .data-table tbody td:nth-child(6) {
    color: #94a3b8; /* slate-400 */
  }
}

/* Bottom radius on the last row */
.list-container .data-table tbody tr:last-child td:first-child {
  border-bottom-left-radius: 12px;
}
.list-container .data-table tbody tr:last-child td:last-child {
  border-bottom-right-radius: 12px;
}

/* Empty-state hint if tbody is empty */
.list-container .data-table tbody:empty::before {
  content: "No stations match the current filters.";
  display: block;
  padding: 28px 16px;
  color: #64748b; /* slate-500 */
  text-align: center;
}
@media (prefers-color-scheme: dark) {
  .list-container .data-table tbody:empty::before {
    color: #94a3b8; /* slate-400 */
  }
}

/* Sort affordance (pure CSS hint) */
.list-container .data-table thead th::after {
  content: "↕";
  opacity: .35;
  margin-left: 6px;
  font-size: .9em;
}
.list-container .data-table thead th:hover::after {
  opacity: .8;
}

.segmented { display:inline-flex; gap:8px; background:#f3f4f6; border-radius:8px; padding:4px; }
.segmented .seg { display:flex; align-items:center; gap:6px; background:white; border:1px solid #e5e7eb; border-radius:6px; padding:6px 10px; cursor:pointer; }
.segmented input { accent-color:#2563eb; }
.new-only { opacity:.95; }

/* ────────────────────────────────────────────────────────────────────────────
   Settings View
   ──────────────────────────────────────────────────────────────────────────── */
.settings-view{
  display:flex;
  flex-direction:column;
  gap:12px;
  height:100%;
  padding:16px;
}

.settings-header{
  display:flex;
  align-items:center;
  justify-content:space-between;
}

.settings-body{
  display:flex;
  flex-direction:column;
  gap:12px;
  min-height:0; /* so .table-scroll can size properly */
}

/* Tabs */
.settings-tabs{
  display:flex;
  gap:8px;
  border-bottom:1px solid #e5e7eb;
  position:sticky;
  top:0;
  background:var(--panel-bg, #fff);
  z-index:1;
  padding-bottom:4px;
}

.tab-btn{
  border:0;
  background:transparent;
  padding:8px 12px;
  border-radius:10px 10px 0 0;
  font-weight:600;
  color:#374151;
  cursor:pointer;
}
.tab-btn:hover{ background:#f3f4f6; }
.tab-btn.active{
  background:#eef2ff;
  color:#1d4ed8;
  box-shadow: inset 0 -2px 0 #1d4ed8;
}

.tab-panel{ padding-top:8px; }

/* Table */
.settings-view .data-table{
  width:100%;
  border-collapse:collapse;
}
.settings-view .data-table th,
.settings-view .data-table td{
  padding:.5rem .6rem;
  border-bottom:1px solid #e5e7eb;
}
.settings-view .data-table thead th{
  text-align:left;
  font-size:.9rem;
  color:#6b7280;
  font-weight:700;
}
.settings-view .data-table tbody tr:hover{ background:#f9fafb; }

/* Color cell */
#mapPinTbody td{ vertical-align:middle; }
#mapPinTbody input[type=color]{
  width:42px;
  height:28px;
  border:1px solid #e5e7eb;
  border-radius:6px;
  padding:0;
  background:#fff;
  box-shadow:0 1px 0 rgba(0,0,0,.04);
  cursor:pointer;
}
#mapPinTbody code{
  font-size:.8rem;
  background:#f9fafb;
  padding:2px 6px;
  border-radius:6px;
  border:1px solid #e5e7eb;
}

/* Sticky footer with subtle backdrop */
.settings-footer{
  position: static;                 /* ← static in normal document flow */
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 0;
  background: transparent;          /* optional: keep transparent since it won’t float */
  border-top: 1px solid #e5e7eb;
}

/* In Settings, let the page (right panel) handle the scroll, not the table pane */
.settings-view .table-scroll{
  overflow: visible;                /* ← remove inner scroll layer */
  flex: 0 0 auto;                   /* ← don’t try to “fill” the column height */
}


/* Dark mode polish */
@media (prefers-color-scheme: dark){
  .settings-tabs{
    border-bottom-color:#374151;
    background:var(--panel-bg, #0b1220);
  }
  .tab-btn{ color:#e5e7eb; }
  .tab-btn:hover{ background:#111827; }
  .tab-btn.active{
    background:#0b1220;
    color:#93c5fd;
    box-shadow: inset 0 -2px 0 #60a5fa;
  }

  .settings-footer{
    background:linear-gradient(to top, rgba(11,18,32,0.95), rgba(11,18,32,0.6));
    border-top-color:#374151;
  }

  #mapPinTbody input[type=color]{
    background:#111827;
    border-color:#374151;
  }
  #mapPinTbody code{
    background:#111827;
    border-color:#374151;
    color:#e5e7eb;
  }

  .settings-view .data-table th,
  .settings-view .data-table td{ border-bottom-color:#374151; }
  .settings-view .data-table tbody tr:hover{ background:#111827; }
}

#stationTable tbody tr { cursor: pointer; }
.leaflet-popup-content a.popup-link { cursor: pointer; }

/* ───────────────── Station detail aesthetic pass ───────────────── */
.detail-page { padding: 16px 24px; }
.page-title { margin: 8px 0 12px; font-size: 28px; font-weight: 800; letter-spacing: .2px; }

.meta-row { display: flex; gap: 8px; align-items: center; margin-bottom: 12px; }
.pill { display:inline-flex; align-items:center; padding:4px 10px; border-radius:9999px; font-size:.85rem; font-weight:600; border:1px solid transparent; }
.pill--green { background:#ecfdf5; color:#065f46; border-color:#a7f3d0; }
.pill--red   { background:#fef2f2; color:#991b1b; border-color:#fecaca; }
.pill--amber { background:#fffbeb; color:#92400e; border-color:#fde68a; }
.pill--muted { background:#f3f4f6; color:#374151; border-color:#e5e7eb; }

.card, .station-section {
  background:#fff;
  border:1px solid #e6e8ec;
  border-radius:14px;
  box-shadow:0 1px 2px rgba(16,24,40,.04);
  padding:12px 16px;
  margin:12px 0;
}
.station-section > h3 { font-size:1rem; color:#111827; margin:0 0 .5rem; }
.station-section table { width:100%; border-collapse:collapse; }
.station-section th {
  text-align:left; width:220px; color:#374151; font-weight:600;
  padding:10px; background:#f9fafb; border-bottom:1px solid #eef2f7;
}
.station-section td { padding:10px; border-bottom:1px solid #eef2f7; }
.station-section input[disabled], .station-section select[disabled] {
  background:#f9fafb; color:#111827; border:1px solid #e5e7eb; border-radius:8px; padding:6px 8px;
}

.tabs { display:flex; gap:8px; margin:10px 0 16px; }
.tab { border:1px solid #e5e7eb; background:#fff; border-radius:8px; padding:6px 10px; font-weight:600; }
.tab.active { background:#f3f4f6; }

.photos-card h3 { margin:0 0 .5rem; }
.photos-card .photo-row { display:flex; gap:12px; overflow-x:auto; padding-top:6px; }
.photo-thumb { width:180px; height:110px; background:#f3f4f6; border:1px solid #e5e7eb; border-radius:10px; box-shadow: inset 0 0 0 1px rgba(0,0,0,.02); }
.photo-thumb img { width:100%; height:100%; object-fit:cover; display:block; }
.photo-thumb.skeleton {
  background:linear-gradient(90deg,#f3f4f6,#eceff3,#f3f4f6);
  background-size:200% 100%;
  animation:photo-skeleton 1.4s ease infinite;
}
@keyframes photo-skeleton { 0%{background-position:200% 0} 100%{background-position:-200% 0} }

.accordion { display:flex; flex-direction:column; gap:10px; margin:12px 0 40px; }
.accordion-item { border:1px solid #e6e8ec; border-radius:12px; background:#fff; overflow:hidden; }
.accordion-header {
  width:100%; text-align:left; background:#f9fafb;
  padding:12px 14px; font-weight:700; display:flex; justify-content:space-between; align-items:center;
  border:none; cursor:pointer;
}
.accordion-header .chev {
  width:10px; height:10px; border-right:2px solid #6b7280; border-bottom:2px solid #6b7280;
  transform:rotate(-45deg); transition:transform .2s ease;
}
.accordion-item.open .accordion-header .chev { transform:rotate(135deg); }

/* ───── Extra section rows: label over value, clean dividers ───── */
.kv-list { list-style: none; margin: 0; padding: 0; }
.kv-row { padding: 12px 6px; border-bottom: 1px solid #eef2f7; }
.kv-row:last-child { border-bottom: none; }

.kv-label {
  color: #9ca3af;           /* muted grey */
  font-weight: 600;
  font-size: .85rem;
  line-height: 1.1;
  letter-spacing: .01em;
}
.kv-value {
  margin-top: 4px;
  color: #111827;
  font-weight: 700;
  line-height: 1.25;
}
.kv-empty { color:#9ca3af; font-weight:600; }

/* Optional: make two columns on wide screens (comment out if you want 1 col) */
@media (min-width: 1100px) {
  .kv-list {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    column-gap: 24px;
  }
  .kv-row { border-bottom: 1px solid transparent; border-top: 1px solid #eef2f7; padding: 10px 0; }
  .kv-row:nth-child(-n+2) { border-top: none; }
}

/* Smooth accordion open/close */
.accordion-content {
  max-height: 0; overflow: hidden;
  padding: 0 14px;
  transition: max-height .25s ease, padding .2s ease;
}
.accordion-item.open .accordion-content {
  padding: 8px 14px 12px;
  max-height: 1600px; /* big enough for most sections */
}

.photo-row { display:flex; gap:8px; }
.photo-thumb { width:96px; height:72px; object-fit:cover; border-radius:6px; }
.photo-grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(160px,1fr)); gap:10px; }
.photo-grid-img { width:100%; height:140px; object-fit:cover; border-radius:8px; }
.photo-empty { opacity:0.65; padding:8px 0; }

/* Lightbox */
html.modal-open, body.modal-open { overflow: hidden; }
.photo-lightbox {
  position: fixed; inset: 0; display: none;
  align-items: center; justify-content: center;
  background: rgba(0,0,0,0.85); z-index: 1000; padding: 24px;
}
.photo-lightbox.open { display: flex; }
.photo-lightbox__backdrop { position: absolute; inset: 0; }
.photo-lightbox__content { position: relative; z-index: 1; max-width: 95vw; max-height: 95vh; }
.photo-lightbox__content img {
  display: block; max-width: 95vw; max-height: 95vh;
  border-radius: 8px; box-shadow: 0 10px 30px rgba(0,0,0,0.5);
}
.photo-lightbox__close {
  position: absolute; top: -12px; right: -12px;
  width: 36px; height: 36px; border: 0; border-radius: 999px;
  background: #fff; font-size: 24px; line-height: 36px; cursor: pointer;
  box-shadow: 0 2px 10px rgba(0,0,0,0.4);
}

/* Full-width mode: hide toggles and expand content when on special pages */
.main-content.full-width {
  /* Force single column layout: left nav and expanded content (no right panel) */
  grid-template-columns: var(--left-col, 260px) 1fr;
}

/* Hide only the RIGHT toggle button when in full-width mode */
.main-content.full-width .edge-toggle.right {
  display: none !important;
}

/* Keep the LEFT toggle button visible and functional */
.main-content.full-width .edge-toggle.left {
  display: flex !important;
}

/* Ensure the right panel is completely hidden in full-width mode */
.main-content.full-width .right-panel {
  display: none !important;
}

/* Make sure station and add-infra containers use the full available space */
.main-content.full-width #stationContentContainer,
.main-content.full-width #addInfraContainer {
  grid-column: 2; /* Only take the center column, expanded fully */
}

/* Optional: When left panel is also collapsed in full-width mode */
.main-content.full-width.left-collapsed {
  grid-template-columns: 0px 1fr; /* Just the expanded content */
}

/* Ensure content containers expand properly */
#stationContentContainer,
#addInfraContainer {
  width: 100%;
  min-width: 0; /* Allow shrinking if needed */
}

/* Footer links in LHS (Settings / Users / Logout) look like quiet items */
.left-panel .footer .nav-list .nav-item{
  color:#94a3b8;
  padding:8px 10px;
}
.left-panel .footer .nav-list .nav-item:hover{ color:#e5e7eb; }

/* Pills in RHS panel (matches station detail page) */
.right-panel .meta-row { 
  display: flex; 
  gap: 8px; 
  align-items: center; 
  margin-bottom: 12px; 
}

.right-panel .pill { 
  display: inline-flex; 
  align-items: center; 
  padding: 4px 10px; 
  border-radius: 9999px; 
  font-size: .85rem; 
  font-weight: 600; 
  border: 1px solid transparent; 
}

.right-panel .pill--green { 
  background: #ecfdf5; 
  color: #065f46; 
  border-color: #a7f3d0; 
}

.right-panel .pill--red { 
  background: #fef2f2; 
  color: #991b1b; 
  border-color: #fecaca; 
}

.right-panel .pill--amber { 
  background: #fffbeb; 
  color: #92400e; 
  border-color: #fde68a; 
}

.right-panel .pill--muted { 
  background: #f3f4f6; 
  color: #374151; 
  border-color: #e5e7eb; 
}

.right-panel h2.clickable,
#rightPanel h2.clickable { cursor: pointer; }
.right-panel h2.clickable:hover,
#rightPanel h2.clickable:hover {
  color: var(--primary);
  text-decoration: underline;
}
.right-panel h2.clickable:focus,
#rightPanel h2.clickable:focus {
  outline: 2px solid rgba(37, 99, 235, 0.35);
  outline-offset: 2px;
  text-decoration: underline;
}

/* RHS Accordion (collapsible extra sections) */
.rhs-accordion { 
  display: flex; 
  flex-direction: column; 
  gap: 8px; 
  margin: 12px 0; 
}

.rhs-accordion-item { 
  border: 1px solid #e6e8ec; 
  border-radius: 8px; 
  background: #fff; 
  overflow: hidden; 
}

.rhs-accordion-header {
  width: 100%; 
  text-align: left; 
  background: #f9fafb;
  padding: 8px 12px; 
  font-weight: 600; 
  font-size: 0.9rem;
  display: flex; 
  justify-content: space-between; 
  align-items: center;
  border: none; 
  cursor: pointer;
  transition: background-color 0.15s ease;
}

.rhs-accordion-header:hover {
  background: #f3f4f6;
}

.rhs-accordion-header .rhs-chev {
  width: 8px; 
  height: 8px; 
  border-right: 2px solid #6b7280; 
  border-bottom: 2px solid #6b7280;
  transform: rotate(-45deg); 
  transition: transform .2s ease;
}

.rhs-accordion-item.open .rhs-accordion-header .rhs-chev { 
  transform: rotate(135deg); 
}

/* RHS accordion content (smooth expand/collapse) */
.rhs-accordion-content {
  max-height: 0; 
  overflow: hidden;
  padding: 0 12px;
  transition: max-height .25s ease, padding .2s ease;
}

.rhs-accordion-item.open .rhs-accordion-content {
  padding: 6px 12px 10px;
  max-height: 800px; /* big enough for most sections */
}

/* RHS field rows (label over value, compact) */
.rhs-kv-list { 
  display: flex; 
  flex-direction: column; 
  gap: 6px; 
}

.rhs-kv-row { 
  padding: 6px 0; 
  border-bottom: 1px solid #f1f5f9; 
}

.rhs-kv-row:last-child { 
  border-bottom: none; 
}

.rhs-kv-label {
  color: #9ca3af;
  font-weight: 600;
  font-size: .8rem;
  line-height: 1.1;
  letter-spacing: .01em;
}

.rhs-kv-value {
  margin-top: 2px;
  color: #111827;
  font-weight: 600;
  font-size: .85rem;
  line-height: 1.25;
}

.rhs-kv-value .kv-empty { 
  color: #9ca3af; 
  font-weight: 600; 
}

/* RHS Photo Section */
.rhs-photo-section {
  background: #fff;
  border: 1px solid #e6e8ec;
  border-radius: 12px;
  box-shadow: 0 1px 2px rgba(16,24,40,.04);
  padding: 12px 16px;
  margin: 12px 0;
}

.rhs-photo-section > h3 { 
  font-size: 1rem; 
  color: #111827; 
  margin: 0 0 8px; 
}

.rhs-photo-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 120px;
}

.rhs-photo-wrapper {
  width: 100%;
  max-width: 200px;
  border-radius: 8px;
  overflow: hidden;
  border: 1px solid #e5e7eb;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.rhs-photo-thumb {
  width: 100%;
  height: 120px;
  object-fit: cover;
  display: block;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.rhs-photo-thumb:hover {
  transform: scale(1.02);
}

.rhs-photo-placeholder {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 120px;
  width: 100%;
  background: #f9fafb;
  border: 1px dashed #d1d5db;
  border-radius: 8px;
  color: #6b7280;
  font-size: 0.9rem;
  font-style: italic;
}

.rhs-photo-empty {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 120px;
  width: 100%;
  background: #f9fafb;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  color: #9ca3af;
  font-size: 0.85rem;
  font-style: italic;
}

/* Ensure the lightbox works with RHS photos */
.rhs-photo-thumb {
  cursor: pointer;
}

/* ───────────────── Station Detail Editing Extensions ───────────────── */

/* Editable sections - match existing station-section styling */
.editable-section {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  padding: 16px;
  margin: 12px 0;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
  padding-bottom: 8px;
  border-bottom: 1px solid var(--border);
}

.section-title-input {
  font-size: 1rem;
  font-weight: 600;
  color: var(--text);
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 8px 12px;
  background: var(--panel);
  min-width: 200px;
}

.section-title-input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.25);
}

.section-actions {
  display: flex;
  gap: 8px;
  align-items: center;
}

/* Field editing rows */
.field-row {
  display: grid;
  grid-template-columns: 1fr 2fr auto;
  gap: 12px;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #f1f5f9;
}

.field-row:last-child {
  border-bottom: none;
}

.field-label-input,
.field-value-input {
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 8px 12px;
  background: var(--panel);
  color: var(--text);
  font-size: 13px;
}

.field-label-input {
  font-weight: 600;
}

.field-value-input::placeholder {
  color: var(--muted);
  font-style: italic;
}

.field-label-input:focus,
.field-value-input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.25);
}

/* Button variants - extend existing btn styles */
.btn-sm {
  height: 28px;
  padding: 0 8px;
  font-size: 12px;
  border-radius: 6px;
}

.btn-danger {
  background: #dc3545;
  color: white;
  border-color: #dc3545;
  font-weight: bold;
  font-size: 14px;
}

.btn-danger:hover {
  background: #c82333;
  border-color: #bd2130;
}

/* Delete Section button styling */
.delete-section-btn {
  background: #dc3545;
  color: white;
  border: 1px solid #dc3545;
  border-radius: 6px;
  padding: 4px 12px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.15s ease;
}

.delete-section-btn:hover {
  background: #c82333;
  border-color: #bd2130;
}

/* Add Section button - white background */
#addSectionBtn {
  background: white;
  color: #374151;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.15s ease;
}

#addSectionBtn:hover {
  background: #f9fafb;
  border-color: #9ca3af;
}

/* Save Changes button - white with green click animation */
#saveChangesBtn {
  background: white;
  color: #374151;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.15s ease;
}

#saveChangesBtn:hover {
  background: #f9fafb;
  border-color: #9ca3af;
}

/* Green click animation for save button */
#saveChangesBtn.btn-success-flash {
  background: #10b981 !important;
  color: white !important;
  border-color: #10b981 !important;
}

.btn-warning {
  background: #ffc107;
  color: #212529;
  border-color: #ffc107;
}

.btn-success {
  background: #28a745;
  color: white;
  border-color: #28a745;
}

/* Warning state (when there are unsaved changes) */
#saveChangesBtn.btn-warning {
  background: #f59e0b;
  color: white;
  border-color: #f59e0b;
}

#saveChangesBtn.btn-warning:hover {
  background: #d97706;
  border-color: #d97706;
}

/* Password modal */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  padding: 24px;
  max-width: 400px;
  width: 90%;
}

.modal-content h3 {
  margin: 0 0 12px;
  color: var(--text);
  font-size: 16px;
  font-weight: 600;
}

.modal-content p {
  margin: 0 0 16px;
  color: var(--muted);
  font-size: 14px;
}

.modal-content input[type="password"] {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid var(--border);
  border-radius: 8px;
  background: var(--panel);
  color: var(--text);
  font-size: 14px;
  margin-bottom: 16px;
}

.modal-content input[type="password"]:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.25);
}

.modal-actions {
  display: flex;
  gap: 8px;
  justify-content: flex-end;
}

/* Bottom section actions area */
.station-section.section-actions {
  margin: 20px 0;
  padding: 16px;
  background: #f8fafc;
  border: 1px solid var(--border);
  border-radius: 0 0 var(--radius) var(--radius);
}

/* General Information unlocked state */
.station-section input[style*="background-color: #fff3cd"],
.station-section select[style*="background-color: #fff3cd"] {
  background: #fff3cd !important;
  border-color: #ffeaa7 !important;
  transition: background-color 0.3s ease;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .field-row {
    grid-template-columns: 1fr;
    gap: 8px;
  }
  
  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .modal-content {
    padding: 16px;
    margin: 16px;
  }
}

/* ==========================================================================
   Add-Infra polish (CSS-only, filters untouched)
   Targets:
   - Add Infra wizard “Select data” table + toolbar
   - Small create panels opened by “+” (".panel-form")
   ========================================================================== */

/* ---------------------------------------------
   Small create panels (Create Company/Location/Assets)
   --------------------------------------------- */
.panel-form {
  background: #ffffff;
  border: 1px solid var(--border);
  border-radius: 12px;
  box-shadow: var(--shadow);
  width: min(820px, 92vw);
  margin: 14px auto;
  padding: 16px 18px;
}
.panel-form h2 {
  font-size: 18px;
  margin: 0 0 10px;
  letter-spacing: .01em;
}
.panel-form .form-row label { color: #374151; }
.panel-form .wizard-footer {
  margin-top: 8px;
  border-top: 1px solid #e5e7eb;
  padding-top: 12px;
}

/* Dark-scheme parity for panels */
@media (prefers-color-scheme: dark) {
  .panel-form {
    background: #0f172a;     /* slate-900 */
    border-color: #1f2937;   /* gray-800 */
    box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  .panel-form h2 { color: #e5e7eb; }
  .panel-form .form-row label { color: #cbd5e1; }
  .panel-form .wizard-footer { border-top-color: #1f2937; }
}

/* ---------------------------------------------
   Add Infra wizard — “Select data” area
   --------------------------------------------- */
#addInfraPage .table-toolbar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 12px;
  background: #ffffff;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  box-shadow: 0 1px 2px rgba(16,24,40,.06);
  margin-bottom: 8px;
}

#addInfraPage .badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: 28px;
  padding: 0 10px;
  border-radius: 999px;
  background: #eef2ff; /* indigo-100 */
  color: #3730a3;      /* indigo-800 */
  font-weight: 700;
  letter-spacing: .01em;
  border: 1px solid #e0e7ff;
}

/* Scroll container + table base */
#addInfraPage .table-scroll {
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  background: #fff;
  box-shadow: 0 4px 10px rgba(16,24,40,.05);
}
#addInfraPage .data-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  font-size: 14px;
}

/* Sticky header + grouped header row (first row = sections) */
#addInfraPage .data-table thead th {
  position: sticky;
  top: 0;
  z-index: 1;
  text-align: left;
  font-weight: 700;
  letter-spacing: .01em;
  padding: 10px 12px;
  white-space: nowrap;
  background: linear-gradient(to bottom, rgba(248,250,252,1), rgba(248,250,252,.92));
  border-bottom: 1px solid #e5e7eb;
  backdrop-filter: saturate(140%) blur(4px);
}
#addInfraPage .data-table thead tr:first-child th {
  font-size: 12px;
  color: #64748b; /* slate-500 */
  text-transform: uppercase;
  letter-spacing: .08em;
}
#addInfraPage .data-table thead th:first-child { border-top-left-radius: 12px; }
#addInfraPage .data-table thead th:last-child  { border-top-right-radius: 12px; }

/* Leading checkbox column */
#addInfraPage .data-table thead th:first-child,
#addInfraPage .data-table tbody td:first-child {
  width: 36px;
  text-align: center;
}

/* Body cells, zebra, hover accent */
#addInfraPage .data-table tbody td {
  padding: 10px 12px;
  border-bottom: 1px solid #f1f5f9;
  color: #111827;
  vertical-align: middle;
}
#addInfraPage .data-table tbody tr:nth-child(even) td { background: #fafcff; }
#addInfraPage .data-table tbody tr:hover td { background: #eef6ff; }
#addInfraPage .data-table tbody tr:hover td:first-child {
  box-shadow: inset 3px 0 0 0 #3b82f6; /* blue-500 accent on hover */
}

/* Row checkboxes */
#addInfraPage .data-table .rowchk2[type="checkbox"],
#addInfraPage #chkAll2[type="checkbox"] {
  accent-color: var(--primary-600, #2563eb);
  width: 16px; height: 16px; cursor: pointer;
}

/* Bottom radius on last row */
#addInfraPage .data-table tbody tr:last-child td:first-child { border-bottom-left-radius: 12px; }
#addInfraPage .data-table tbody tr:last-child td:last-child  { border-bottom-right-radius: 12px; }

/* Dark-scheme parity for the wizard table */
@media (prefers-color-scheme: dark) {
  #addInfraPage .table-toolbar {
    background: #0f172a;
    border-color: #1f2937;
    box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  #addInfraPage .table-scroll {
    background: #0f172a;
    border-color: #1f2937;
    box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  #addInfraPage .data-table thead th {
    background: linear-gradient(to bottom, rgba(15,23,42,1), rgba(15,23,42,.92));
    border-bottom-color: #1f2937;
    color: #e5e7eb;
  }
  #addInfraPage .data-table tbody td {
    border-bottom-color: #1f2937;
    color: #e5e7eb;
  }
  #addInfraPage .data-table tbody tr:nth-child(even) td { background: #0b1326; }
  #addInfraPage .data-table tbody tr:hover td { background: #0c1a33; }
  #addInfraPage .badge {
    background: rgba(99,102,241,.18);
    border-color: rgba(99,102,241,.28);
    color: #e0e7ff;
  }
}

/* ---------------------------------------------
   Filepicker focus/hover (wizard step 2 & panels)
   --------------------------------------------- */
.filepicker:hover {
  border-color: #cbd5e1;
  background: #f9fafb;
}
.filepicker:focus-within {
  outline: none;
  border-color: var(--primary-600, #2563eb);
  box-shadow: 0 0 0 3px rgba(37,99,235,.18);
}

/* Reduced-motion friendliness */
@media (prefers-reduced-motion: reduce) {
  #addInfraPage .data-table tbody tr { transition: none; }
}

/* Filter tree — make the vertical guide start under the disclosure arrow */
#filterTree details {               /* neutralize the old always-on border */
  position: relative;
  border-left: 0 !important;        /* overrides earlier rule */
  padding-left: .5rem;              /* keep existing content indent */
  margin-left: .25rem;
}

/* Height of a summary row (caret line starts below this). 
   If it sits a bit high/low, tweak 32–38px. */
#filterTree details.ft-company,
#filterTree details.ft-location { --ft-summary-h: 36px; }

/* Draw the guide only under the arrow, from below the summary row downwards */
#filterTree details.ft-company::before,
#filterTree details.ft-location::before {
  content: "";
  position: absolute;
  left: 0;                          /* directly under the caret */
  top: var(--ft-summary-h);         /* start below the summary row */
  bottom: 6px;                      /* small breathing room at the bottom */
  width: 2px;
  background: rgba(148,163,184,.18);
  pointer-events: none;
}

/* Keep your deeper asset indent, but the guide is now drawn by the rule above */
#filterTree .ft-location > .ft-children {
  margin-left: 3rem;                /* your preferred depth */
  padding-left: .75rem;             /* space from the guide to the text */
  border-left: 0;                   /* no extra inner line here */
}

#filterTree .ft-location > .ft-children .ft-row.ft-asset {
  margin-left: .25rem;              /* nudge text clear of the guide */
}

/* Tab panels: show only the active one */
.tab-content { display: none; }
.tab-content.active { display: block; }



/* ───────────────── Reusable table styles (work anywhere) ──────────────── */
.table-scroll{
  flex: 1 1 auto;
  overflow: auto;
  background: #fff;
  border: 1px solid var(--border);
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(16,24,40,.05);
}

/* use the same look your List View has, but unscoped */
.data-table{
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  font-size: 14px;
}

/* sticky header */
.data-table thead th{
  position: sticky; top: 0; z-index: 1;
  text-align: left; font-weight: 600; letter-spacing: .01em;
  padding: 10px 12px; white-space: nowrap;
  background: linear-gradient(to bottom, rgba(248,250,252,1), rgba(248,250,252,.92));
  border-bottom: 1px solid var(--border);
  backdrop-filter: saturate(140%) blur(4px);
}
.data-table thead th:first-child{ border-top-left-radius: 12px; }
.data-table thead th:last-child { border-top-right-radius: 12px; }

/* body cells, zebra, hover accent */
.data-table tbody td{
  padding: 10px 12px;
  border-bottom: 1px solid #f1f5f9;
  color: #111827;
  vertical-align: middle;
}
.data-table tbody tr:nth-child(even) td{ background: #fafcff; }
.data-table tbody tr:hover td{ background: #eef6ff; }
.data-table tbody tr:hover td:first-child{ box-shadow: inset 3px 0 0 0 #3b82f6; }

.data-table tbody tr:last-child td:first-child{ border-bottom-left-radius: 12px; }
.data-table tbody tr:last-child td:last-child { border-bottom-right-radius: 12px; }

/* dark-scheme parity */
@media (prefers-color-scheme: dark){
  .table-scroll{
    background:#0f172a; border-color:#1f2937;
    box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  .data-table thead th{
    background: linear-gradient(to bottom, rgba(15,23,42,1), rgba(15,23,42,.92));
    border-bottom-color:#1f2937; color:#e5e7eb;
  }
  .data-table tbody td{ border-bottom-color:#1f2937; color:#e5e7eb; }
  .data-table tbody tr:nth-child(even) td{ background:#0b1326; }
  .data-table tbody tr:hover td{ background:#0c1a33; }
  .data-table tbody tr:hover td:first-child{ box-shadow: inset 3px 0 0 0 #60a5fa; }
}

/* ────────────────────────────────────────────────────────────────────────────
   Settings → Nuke tab
   ──────────────────────────────────────────────────────────────────────────── */
.nuke-section{
  position: relative;
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  padding: 14px 16px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

/* subtle left "danger" accent to mirror your table hover accent */
.nuke-section::before{
  content:"";
  position:absolute; inset:0 auto 0 0;
  width: 4px;
  background: #ef4444; /* red-500 */
  border-top-left-radius: var(--radius);
  border-bottom-left-radius: var(--radius);
  opacity: .95;
}

/* button placement + spacing (prefer class over inline styles) */
#nukeBtn{
  align-self:flex-start;
  margin-bottom: .35rem;
}

/* keep using your .btn + .btn-danger styles; add focus ring parity */
#nukeBtn:focus{
  outline: none;
  box-shadow: 0 0 0 3px rgba(239,68,68,.25); /* red-500 focus */
}

/* supporting copy below button */
.nuke-section .hint{
  margin: 0;
  font-size: 13px;
  color: var(--muted);
}

/* ephemeral status text set by JS */
#nukeStatus{
  margin-top: .35rem;
  font-size: 13px;
  color: var(--muted);
}

/* dark-scheme parity */
@media (prefers-color-scheme: dark){
  .nuke-section{
    background: #0f172a;         /* slate-900 */
    border-color: #1f2937;       /* gray-800 */
    box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  .nuke-section::before{
    background: #f87171;         /* red-400 a touch brighter on dark */
  }
  .nuke-section .hint,
  #nukeStatus{
    color: #cbd5e1;              /* slate-300 */
  }
}
/* Make the whole wizard fill the space so inner scrollers can size */
#addInfraContainer { height: 100%; }
#addInfraPage.wizard-container { height: 100%; display: flex; flex-direction: column; }

/* Wizard body needs to be a flex column with a shrinkable middle */
#addInfraPage .wizard-body { flex: 1 1 auto; display: flex; flex-direction: column; min-height: 0; }

/* Step 4 ("Select data") should also be flex so the table-scroll can grow */
#stepSelectData { flex: 1 1 auto; display: flex; flex-direction: column; min-height: 0; }

/* Let the table area be the actual scrolling viewport */
#stepSelectData .table-scroll { flex: 1 1 420px; min-height: 260px; }

/* The two in-panel flows (Create Assets / Import More) are .panel-form blocks.
   Make them bounded and give their table areas the viewport too. */
.panel-form { display: flex; flex-direction: column; max-height: 92vh; min-height: 0; }
.panel-form .table-scroll { flex: 1 1 420px; min-height: 260px; }

/* Hide/show the scroll region via JS */
.table-scroll.is-hidden { display: none !important; }

/* Lightweight empty-state note (JS toggles .show) */
.empty-note {
  display: none;
  padding: 12px;
  color: #64748b;
  border: 1px dashed #e5e7eb;
  border-radius: 10px;
  background: #fff;
  font-size: 14px;
}
.empty-note.show { display: block; }

/* Edit-mode visibility for per-section controls */
.station-section .edit-only { display: none; }
.station-section.editing .edit-only { display: inline-flex; } /* or inline-block */

/* frontend/css/alert-modal.css */
.app-alert-overlay{position:fixed;inset:0;display:none;align-items:center;justify-content:center;background:rgba(0,0,0,.45);z-index:2147483646}
.app-alert-overlay.show{display:flex}
.app-alert-modal{max-width:520px;width:calc(100% - 32px);background:#fff;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.25);padding:20px;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;line-height:1.4}
.app-alert-title{margin:0 0 8px;font-size:18px;font-weight:600}
.app-alert-message{margin:0 0 16px;white-space:pre-wrap;word-wrap:break-word}
.app-alert-actions{display:flex;justify-content:flex-end;gap:8px}
.app-alert-btn{appearance:none;border:0;border-radius:10px;padding:10px 14px;font-weight:600;cursor:pointer}
.app-alert-btn:focus{outline:2px solid #4c9ffe;outline-offset:2px}
.app-alert-ok{background:#111;color:#fff}
@media (prefers-color-scheme: dark){
  .app-alert-modal{background:#1d1f23;color:#e6e6e6}
  .app-alert-ok{background:#e6e6e6;color:#111}
}

/* ─────────────────────────────────────────────────────────────
   Add Inspection modal — polish
   Keeps existing IDs so JS works unchanged.
   ──────────────────────────────────────────────────────────── */
.ih-modal .ih-modal__content{
  max-width: 1024px;
  width: 92%;
  max-height: 86vh;
  display: flex;
  flex-direction: column;
  gap: 0;
  padding: 0;
}

.ih-modal__header{
  position: sticky;
  top: 0;
  background: var(--panel);
  border-bottom: 1px solid var(--border);
  padding: 16px 20px 12px;
  z-index: 1;
}
.ih-modal__header h3{
  margin: 0;
  font-size: 18px;
  font-weight: 800;
  letter-spacing: .2px;
}
.ih-subtitle{
  margin: 4px 0 0;
  color: var(--muted);
  font-size: 12px;
}

.ih-modal__body{
  padding: 14px 20px 6px;
  overflow: auto;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.ih-modal__footer{
  position: sticky;
  bottom: 0;
  background: var(--panel);
  border-top: 1px solid var(--border);
  padding: 12px 16px;
  display: flex;
  justify-content: flex-end;
  gap: 8px;
}

.ih-section{
  background: #fff;
  border: 1px solid var(--border);
  border-radius: 10px;
  padding: 12px;
}
.ih-section__title{ margin: 0 0 10px; font-size: 14px; font-weight: 700; }
.ih-section__title-row{
  display: flex; align-items: center; justify-content: space-between; gap: 10px; margin-bottom: 8px;
}

.ih-note{
  font-size: 12px; color: var(--muted);
  background: #f3f4f6; border: 1px solid var(--border);
  padding: 4px 8px; border-radius: 999px;
}

/* Responsive fields grid */
.ih-grid{
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}
@media (max-width: 720px){
  .ih-grid{ grid-template-columns: 1fr; }
}

/* Shared form row look (reuses your tokens) */
.ih-section .form-row {
  display: flex; flex-direction: column; gap: 6px; margin: 0;
}
.ih-section .form-row label{
  font-size: 12px; color: #6b7280; font-weight: 700;
}
.ih-section .form-row.required label::after{
  content: " *"; color: #dc2626;
}
.ih-section input[type="text"],
.ih-section input[type="number"],
.ih-section textarea,
.ih-section select{
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 10px 12px;
  background: #fff;
  font-size: 14px;
}
.ih-help{ font-size: 11px; color: #6b7280; }

/* Files row */
.ih-file-row{
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}
@media (max-width: 720px){
  .ih-file-row{ grid-template-columns: 1fr; }
}
.ih-file-col{ display: flex; align-items: center; gap: 10px; }

.ih-badge{
  display: inline-flex; align-items: center; justify-content: center;
  height: 26px; padding: 0 10px; border-radius: 999px;
  background: #eef2ff; color: #3730a3; font-weight: 700; letter-spacing: .01em;
  border: 1px solid #e0e7ff; font-size: 12px;
}


/* Repairs: resolve mode selection */
.resolve-selectable { cursor: pointer; }
.resolve-selected td { background: #fee2e2 !important; } /* red-200 tint */

/* Repairs add-row grid */
.ih-repairs-addGrid{
  display: grid;
  /* Updated to include the new "Type" select before the button column */
  grid-template-columns: 1.4fr 0.9fr 0.9fr 0.9fr 0.8fr 0.8fr auto;
  gap: 10px;
  align-items: end;
  margin-bottom: 10px;
}
@media (max-width: 960px){
  .ih-repairs-addGrid{ grid-template-columns: 1fr 1fr; }
  .ih-repairs-addGrid .form-row--button{ grid-column: 1 / -1; }
}

/* Table area inside modal */
.ih-table-scroll{
  max-height: 240px;
  border-radius: 10px;
}

/* Error box */
.ih-error{
  border: 1px solid #fecaca;
  background: #fff1f2;
  color: #b91c1c;
  font-weight: 700;
  border-radius: 10px;
  padding: 10px 12px;
}

/* prevent grid items from forcing overflow */
.ih-repairs-addGrid .form-row,
.ih-repairs-addGrid input,
.ih-repairs-addGrid select {
  min-width: 0;               /* let inputs shrink inside the grid */
}

/* allow sideways scroll as a last resort */
.ih-repairs-addGrid {
  overflow-x: auto;
  padding-bottom: 4px;        /* keeps the scrollbar off the content */
}

/* --- Small additions for the new UI --- */

/* Optional helper if you prefer classes over inline styles in your header/actions */
.ih-repairs-toolbar{
  display:flex;
  align-items:center;
  justify-content:space-between;
  gap:12px;
  margin-bottom:8px;
}
.ih-repairs-actions{
  display:flex;
  align-items:center;
  gap:8px;
}

/* Default hidden; JS toggles display to flex when Edit is active */
#repActionsBlock{ display:none; gap:8px; }

/* Keep Date column compact in both tables */
.data-table th:first-child,
.data-table td:first-child{
  white-space:nowrap;
}

/* Generic table scroll (your markup already uses .table-scroll) */
.table-scroll{
  overflow:auto;
  border-radius:10px;
}

/* Subsection title (Monitoring Items heading) */
.ih-subtitle{
  margin:14px 0 6px;
}

/* just to be explicit for the modal body too */
.ih-modal__body { overflow: auto; }

/* frontend/css/confirm-modal.css */
.app-confirm-overlay{position:fixed;inset:0;display:none;align-items:center;justify-content:center;background:rgba(0,0,0,.45);z-index:2147483647}
.app-confirm-overlay.show{display:flex}

.app-confirm-modal{
  max-width:520px;width:calc(100% - 32px);
  background: var(--panel, #fff);
  border: 1px solid var(--border);
  border-radius: 14px;
  box-shadow: 0 10px 30px rgba(0,0,0,.25);
  padding: 20px;
  font-family: system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  line-height: 1.4;
}

.app-confirm-title{margin:0 0 8px;font-size:18px;font-weight:700;color:var(--text,#111827)}
.app-confirm-message{margin:0 0 16px;white-space:pre-wrap;word-wrap:break-word;color:var(--muted,#374151)}

.app-confirm-actions{display:flex;justify-content:flex-end;gap:8px}
.app-confirm-btn{
  appearance:none;border:1px solid var(--border);border-radius:10px;
  padding:10px 14px;font-weight:600;cursor:pointer;background:#fff;color:#111827
}
.app-confirm-btn:focus{outline:2px solid rgba(37,99,235,.5);outline-offset:2px}
.app-confirm-cancel{background:#f3f4f6}
.app-confirm-ok{background:#111;color:#fff;border-color:#111}

/* Optional: make OK look destructive when modal has the "danger" modifier */
.app-confirm--danger .app-confirm-ok{background:#dc2626;border-color:#dc2626}

/* Dark mode parity */
@media (prefers-color-scheme: dark){
  .app-confirm-modal{background:#1d1f23;color:#e6e6e6;border-color:#374151}
  .app-confirm-message{color:#cbd5e1}
  .app-confirm-cancel{background:#2a2e35;color:#e6e6e6;border-color:#374151}
  .app-confirm-ok{background:#e6e6e6;color:#111;border-color:#e6e6e6}
  .app-confirm--danger .app-confirm-ok{background:#f87171;color:#111;border-color:#f87171}
}

.link-tree {
  border: 1px solid #e5e7eb;
  border-radius: 4px;
  max-height: 500px;
  overflow-y: auto;
  background: white;
}

.link-company {
  border-bottom: 1px solid #f3f4f6;
}

.link-company:last-child {
  border-bottom: none;
}

.link-company-header {
  padding: .75rem 1rem;
  background: #f9fafb;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  user-select: none;
}

.link-company-header:hover {
  background: #f3f4f6;
}

.link-company-header .chevron {
  transition: transform 0.2s;
  color: #9ca3af;
}

.link-company.expanded .chevron {
  transform: rotate(90deg);
}

.link-company-content {
  display: none;
  padding: .5rem 0;
}

.link-company.expanded .link-company-content {
  display: block;
}

.link-location {
  margin: 0 1rem .5rem;
  border: 1px solid #e5e7eb;
  border-radius: 4px;
  background: #fefefe;
}

.link-location-header {
  padding: .5rem .75rem;
  background: #f9fafb;
  display: flex;
  align-items: center;
  gap: .75rem;
}

.link-location-name {
  font-weight: 500;
  min-width: 100px;
}

.link-path-input {
  flex: 1;
  font-family: monospace;
  font-size: .85rem;
  padding: .25rem .5rem;
  border: 1px solid #e5e7eb;
  border-radius: 3px;
  background: white;
}

.link-path-input:focus {
  outline: 2px solid #3b82f6;
  outline-offset: -1px;
  border-color: #3b82f6;
}

.link-path-input::placeholder {
  color: #9ca3af;
  font-style: italic;
}

.link-asset-types {
  border-top: 1px solid #e5e7eb;
  padding: .5rem 0;
}

.link-asset-type {
  padding: .25rem .75rem;
  display: flex;
  align-items: center;
  gap: .75rem;
}

.link-asset-type:hover {
  background: #f9fafb;
}

.link-asset-type-name {
  min-width: 120px;
  padding-left: 1rem;
  color: #4b5563;
}

/* ==========================================================================
   NHS Infrastructure — Dashboard (scoped)
   Targets: dashboard.html + dashboard.js
   Uses existing tokens from :root (bg/panel/text/muted/border/primary/etc.)
   ========================================================================== */

.nhs-dashboard{
  grid-column: 2 / 4;                   /* fills center/right like other views */
  display: block;
  width: 100%;
  min-height: calc(100vh - 64px);
  background: var(--bg);
  padding: 12px 14px 18px;
}

/* ── Tabs strip ─────────────────────────────────────────────────────────── */
.nhs-dashboard .dashboard-tabs{
  position: sticky; top: 0;
  display: flex; gap: 8px; align-items: center;
  background: var(--bg);
  padding-bottom: 6px; margin-bottom: 10px;
  z-index: 1;
}

.nhs-dashboard .dashboard-tab{
  appearance: none;
  border: 1px solid var(--border);
  background: #fff;
  color: var(--text);
  border-radius: 10px 10px 0 0;
  padding: 8px 12px;
  font-weight: 700;
  letter-spacing: .01em;
  cursor: pointer;
  position: relative;
  transition: background .15s ease, color .15s ease, border-color .15s ease;
}
.nhs-dashboard .dashboard-tab:hover{ background:#f3f4f6; }
.nhs-dashboard .dashboard-tab:focus{
  outline: none;
  box-shadow: 0 0 0 3px rgba(37,99,235,.18);
}
.nhs-dashboard .dashboard-tab.active{
  background:#eef2ff; color:#1d4ed8;
  border-color:#dbeafe;
  box-shadow: inset 0 -2px 0 #1d4ed8;
}

/* Panel visibility */
.nhs-dashboard .dashboard-content{ display:none; }
.nhs-dashboard .dashboard-content.active{ display:block; }

/* ── Pane layout ────────────────────────────────────────────────────────── */
.nhs-dashboard .top-pane,
.nhs-dashboard .bottom-pane{
  background:#fff;
  border:1px solid var(--border);
  border-radius: 12px;
  box-shadow: var(--shadow);
  padding: 12px;
}

.nhs-dashboard .top-pane{ display:flex; flex-direction:column; gap:10px; }
.nhs-dashboard .bottom-pane{ margin-top: 10px; }

/* Section divider */
.nhs-dashboard .separator{
  border: 0; height: 1px; margin: 12px 2px;
  background: linear-gradient(to right, transparent, var(--border), transparent);
}

/* ── Actions row (buttons already styled globally) ─────────────────────── */
.nhs-dashboard .actions{ display:flex; align-items:center; gap:8px; flex-wrap:wrap; }

/* ── Parameters list (display rows) ─────────────────────────────────────── */
.nhs-dashboard #paramContainer{ display:flex; flex-direction:column; gap:8px; }

.nhs-dashboard .param-row{
  display: grid;
  grid-template-columns: 1.3fr 0.9fr 1.2fr auto 92px 34px;
  gap: 8px; align-items: center;
  background:#fff;
  border:1px solid var(--border);
  border-radius:10px;
  padding: 8px;
}
@media (max-width: 860px){
  .nhs-dashboard .param-row{
    grid-template-columns: 1fr 1fr;
    grid-auto-rows: minmax(36px, auto);
  }
  .nhs-dashboard .param-row .deleteParamBtn{ justify-self: start; }
}

.nhs-dashboard .param-row input[type="text"],
.nhs-dashboard .param-row input[type="number"],
.nhs-dashboard .param-row select{
  border:1px solid var(--border);
  border-radius:8px;
  background:#fff;
  color:var(--text);
  padding:8px 10px;
  min-width: 0;
  font-size: 13px;
}
.nhs-dashboard .param-row input[disabled],
.nhs-dashboard .param-row select[disabled]{
  background:#f9fafb; color:#111827;
}

.nhs-dashboard .param-weight-display{
  display:inline-flex; align-items:center; justify-content:center;
  min-width: 44px;
  height: 32px;
  padding: 0 8px;
  border-radius: 8px;
  background:#f3f4f6;
  border:1px solid var(--border);
  font-weight: 700; color:#334155;
}

.nhs-dashboard .param-percentage{
  font-variant-numeric: tabular-nums;
  text-align:right;
}
.nhs-dashboard .param-percentage:focus{
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(37,99,235,.18);
}
.nhs-dashboard .param-row .deleteParamBtn{
  appearance:none; border:0; background:#fee2e2; color:#991b1b;
  width: 32px; height: 32px; border-radius: 8px; cursor:pointer;
  font-size: 18px; line-height: 1;
}
.nhs-dashboard .param-row .deleteParamBtn:hover{
  background:#fecaca; color:#7f1d1d;
}

/* Percentage summary */
.nhs-dashboard #percentageSection h3{ margin:.2rem 0 .25rem; font-size: 14px; }
.nhs-dashboard #percentageTotal{ font-weight: 800; }

/* Stats area */
.nhs-dashboard #paramStats{
  font-size: 13px; color: var(--muted);
  padding: 6px 8px; background:#f8fafc; border:1px dashed var(--border);
  border-radius: 10px;
}

/* ── Add Parameter modal + sub-modal (custom weight) ───────────────────── */
.nhs-dashboard .modal{
  position: fixed; inset: 0;
  display: none; align-items: center; justify-content: center;
  background: rgba(0,0,0,.45);
  z-index: 1000;
}
.nhs-dashboard .modal.show{ display:flex !important; }

.nhs-dashboard .modal-content{
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 12px;
  box-shadow: var(--shadow);
  padding: 16px 16px 12px;
  width: min(520px, 92vw);
}

.nhs-dashboard .modal-header{
  margin: 0;
  font-size: 16px; font-weight: 800; letter-spacing:.2px;
}

.nhs-dashboard .close-modal{
  position: absolute; top: 8px; right: 12px;
  width: 32px; height: 32px;
  border-radius: 8px; cursor: pointer;
  display: inline-flex; align-items:center; justify-content:center;
  background:#f3f4f6; border:1px solid var(--border);
  font-size: 18px; line-height: 1;
}
.nhs-dashboard .close-modal:hover{ background:#e5e7eb; }

/* Inputs inside modals */
.nhs-dashboard .modal-content input[type="text"],
.nhs-dashboard .modal-content input[type="number"],
.nhs-dashboard .modal-content select{
  border:1px solid var(--border);
  border-radius:8px;
  padding:10px 12px;
  background:#fff; color:var(--text);
  width: 100%;
}
.nhs-dashboard .modal-content label{
  font-size: 12px; font-weight: 700; color:#6b7280;
}

/* Option rows inside the modal */
.nhs-dashboard .option-row{
  display:flex; align-items:center; gap:8px;
  padding: 6px; background:#f9fafb; border:1px solid var(--border); border-radius:8px;
}
.nhs-dashboard .option-row .deleteOptionBtn{
  appearance:none; border:0; background:transparent; color:#dc2626; cursor:pointer;
  font-size:18px; line-height:1; padding: 0 4px;
}
.nhs-dashboard #optionsList{ display:flex; flex-direction:column; gap:6px; }

/* Sub-modal specific width */
.nhs-dashboard #customWeightModal .modal-content{
  width: min(360px, 92vw);
}

/* ── Workplan constants + table ────────────────────────────────────────── */
.nhs-dashboard #constantsContainer{ display:flex; flex-direction:column; gap:8px; }

.nhs-dashboard .const-row{
  display:flex; align-items:center; gap:.5em;
  background:#fff; border:1px solid var(--border); border-radius:10px; padding:8px;
}
.nhs-dashboard .const-row input{
  border:1px solid var(--border); border-radius:8px; padding:8px 10px; background:#fff; color:var(--text);
}
.nhs-dashboard .const-row button{
  appearance:none; border:0; background:#fee2e2; color:#991b1b; border-radius:8px;
  width:32px; height:32px; cursor:pointer; font-size:18px;
}

/* Import bar */
.nhs-dashboard #workplanContainer > div[style*="margin-top:12px"]{
  /* inherit structure created by JS; give it style class-like */
  background:#f8fafc; border:1px dashed var(--border); border-radius:10px; padding:8px 10px;
}
.nhs-dashboard #btnImportRepairs{ height:36px; }

/* Workplan table (opt-table) — reuse data-table look */
.nhs-dashboard .opt-table{
  width:100%; border-collapse: separate; border-spacing:0; font-size:14px;
}
.nhs-dashboard .opt-table thead th{
  position: sticky; top: 0; z-index: 1;
  text-align:left; font-weight:700; letter-spacing:.01em;
  padding:10px 12px; white-space:nowrap;
  background: linear-gradient(to bottom, rgba(248,250,252,1), rgba(248,250,252,.92));
  border-bottom:1px solid var(--border);
  backdrop-filter: saturate(140%) blur(4px);
}
.nhs-dashboard .opt-table thead th:first-child{ border-top-left-radius: 12px; }
.nhs-dashboard .opt-table thead th:last-child { border-top-right-radius: 12px; }

.nhs-dashboard .opt-table tbody td{
  padding:10px 12px;
  border-bottom:1px solid #f1f5f9;
  color:#111827; vertical-align: middle;
}
.nhs-dashboard .opt-table tbody tr:nth-child(even) td{ background:#fafcff; }
.nhs-dashboard .opt-table tbody tr:hover td{ background:#eef6ff; }
.nhs-dashboard .opt-table tbody tr:hover td:first-child{ box-shadow: inset 3px 0 0 0 #3b82f6; }

.nhs-dashboard .opt-table tbody tr:last-child td:first-child{ border-bottom-left-radius: 12px; }
.nhs-dashboard .opt-table tbody tr:last-child td:last-child { border-bottom-right-radius: 12px; }

/* ── Optimization I ─────────────────────────────────────────────────────── */
.nhs-dashboard #optimization .opt-container{
  background:#fff; border:1px solid var(--border); border-radius:12px; box-shadow:var(--shadow);
  padding:12px;
}
.nhs-dashboard #optimization .opt-container ol{
  margin: 10px 0 0 18px; padding: 0;
}
.nhs-dashboard #optimization .opt-container li{
  padding: 6px 4px; font-variant-numeric: tabular-nums;
}

/* ── Optimization II (geo) ─────────────────────────────────────────────── */
.nhs-dashboard #optimization2 .opt2-hero{
  background: linear-gradient(180deg, #eef2ff, #ffffff 60%);
  border:1px solid #e0e7ff; border-radius:12px; box-shadow: var(--shadow);
  padding: 18px; margin-bottom: 10px;
  display:flex; align-items:center; justify-content:center;
}
.nhs-dashboard #optimization2 .opt2-container{
  background:#fff; border:1px solid var(--border); border-radius:12px; box-shadow:var(--shadow);
  padding: 12px;
}

.nhs-dashboard .opt2-header{
  display:flex; align-items:center; justify-content:space-between; gap:12px;
  padding-bottom: 8px; margin-bottom: 10px;
  border-bottom:1px solid var(--border);
}
.nhs-dashboard .opt2-title{ font-weight:800; letter-spacing:.2px; }
.nhs-dashboard .opt2-summary{ display:flex; gap:8px; flex-wrap:wrap; }
.nhs-dashboard .opt2-summary .chip{
  display:inline-flex; align-items:center; height:26px; padding:0 10px; border-radius:999px;
  background:#eef2ff; color:#3730a3; border:1px solid #e0e7ff; font-weight:700; font-size:12px;
}

/* Trips sections */
.nhs-dashboard .opt2-trip{
  background:#fff; border:1px solid var(--border); border-radius:12px; padding:10px; margin:12px 0;
}
.nhs-dashboard .opt2-trip-head{
  display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom: 6px;
}
.nhs-dashboard .opt2-trip .trip-title{ font-weight:700; }
.nhs-dashboard .opt2-trip .trip-meta{ display:flex; gap:6px; flex-wrap:wrap; }
.nhs-dashboard .opt2-trip .pill{
  display:inline-flex; align-items:center; height:22px; padding:0 8px; border-radius:999px;
  background:#f3f4f6; color:#374151; border:1px solid var(--border); font-size:12px; font-weight:700;
}

/* Geo tables */
.nhs-dashboard .opt2-table{
  width:100%; border-collapse: separate; border-spacing:0; font-size:13px;
}
.nhs-dashboard .opt2-table thead th{
  text-align:left; padding:8px 10px; background:#f8fafc; border-bottom:1px solid var(--border);
  position: sticky; top: 0; z-index: 1;
}
.nhs-dashboard .opt2-table tbody td{
  padding:8px 10px; border-bottom:1px solid #f1f5f9; vertical-align: middle;
}
.nhs-dashboard .opt2-table td.num,
.nhs-dashboard .opt2-table th.num{ text-align:right; font-variant-numeric: tabular-nums; }
.nhs-dashboard .opt2-table td.rank{ width: 40px; text-align:center; font-weight:700; }

/* Notes / errors */
.nhs-dashboard .opt2-note{
  padding:10px; border:1px dashed var(--border); border-radius:10px; background:#f8fafc; color:var(--muted);
}
.nhs-dashboard .opt2-error{
  padding:10px; border:1px solid #fecaca; border-radius:10px; background:#fff1f2; color:#b91c1c; font-weight:700;
}

/* ── Dark mode parity ───────────────────────────────────────────────────── */
@media (prefers-color-scheme: dark){
  .nhs-dashboard{ background:#0b1220; }
  .nhs-dashboard .dashboard-tab{ background:#0f172a; border-color:#1f2937; color:#e5e7eb; }
  .nhs-dashboard .dashboard-tab:hover{ background:#111827; }
  .nhs-dashboard .dashboard-tab.active{
    background:#0b1220; color:#93c5fd; border-color:#1f2937; box-shadow: inset 0 -2px 0 #60a5fa;
  }

  .nhs-dashboard .top-pane,
  .nhs-dashboard .bottom-pane,
  .nhs-dashboard #optimization .opt-container,
  .nhs-dashboard #optimization2 .opt2-container,
  .nhs-dashboard .opt2-trip{
    background:#0f172a; border-color:#1f2937; box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  .nhs-dashboard .separator{ background: linear-gradient(to right, transparent, #1f2937, transparent); }

  .nhs-dashboard .param-row,
  .nhs-dashboard .const-row{ background:#0f172a; border-color:#1f2937; }
  .nhs-dashboard .param-row input,
  .nhs-dashboard .param-row select,
  .nhs-dashboard .const-row input{
    background:#0b1326; border-color:#1f2937; color:#e5e7eb;
  }
  .nhs-dashboard .param-row input[disabled],
  .nhs-dashboard .param-row select[disabled]{ background:#0b1326; color:#e5e7eb; }

  .nhs-dashboard .param-weight-display{ background:#111827; border-color:#1f2937; color:#cbd5e1; }

  .nhs-dashboard .opt-table thead th,
  .nhs-dashboard .opt2-table thead th{
    background: linear-gradient(to bottom, rgba(15,23,42,1), rgba(15,23,42,.92));
    border-bottom-color:#1f2937; color:#e5e7eb;
  }
  .nhs-dashboard .opt-table tbody td,
  .nhs-dashboard .opt2-table tbody td{ border-bottom-color:#1f2937; color:#e5e7eb; }
  .nhs-dashboard .opt-table tbody tr:nth-child(even) td,
  .nhs-dashboard .opt2-table tbody tr:nth-child(even) td{ background:#0b1326; }
  .nhs-dashboard .opt-table tbody tr:hover td,
  .nhs-dashboard .opt2-table tbody tr:hover td{ background:#0c1a33; }
  .nhs-dashboard .opt-table tbody tr:hover td:first-child{ box-shadow: inset 3px 0 0 0 #60a5fa; }

  .nhs-dashboard #percentageSection h3,
  .nhs-dashboard #paramStats{ color:#cbd5e1; background:#0b1326; border-color:#1f2937; }

  .nhs-dashboard #optimization2 .opt2-hero{
    background: linear-gradient(180deg, #0c1a33, #0f172a 60%);
    border-color:#1f2937;
  }
  .nhs-dashboard .opt2-summary .chip{
    background: rgba(99,102,241,.18); border-color: rgba(99,102,241,.28); color:#e0e7ff;
  }

  .nhs-dashboard .modal-content{
    background:#0f172a; border-color:#1f2937; box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
  }
  .nhs-dashboard .close-modal{ background:#111827; border-color:#1f2937; color:#e5e7eb; }
}

/* ── Small helpers ─────────────────────────────────────────────────────── */
.nhs-dashboard .hint{ font-size:12px; color: var(--muted); }
.nhs-dashboard .muted{ color:#64748b; }
.nhs-dashboard .num{ font-variant-numeric: tabular-nums; }

/* ── Make Add Parameter modal scrollable ───────────────────────────────── */
.nhs-dashboard .modal-content{
  /* keep your existing styles */
  max-height: calc(100vh - 48px);  /* never exceed the screen */
  overflow: auto;                   /* scroll inside the modal */
  overscroll-behavior: contain;     /* prevent scroll chaining to page */
  scrollbar-gutter: stable;         /* avoids layout shift when scrollbar appears (supported browsers) */
}

/* Tweak for small screens */
@media (max-width: 640px){
  .nhs-dashboard .modal-content{
    max-height: 92vh;
    width: 92vw;                    /* already near this, but ensures it on small screens */
  }
}

/* Optional: keep the very tall options list tidy without making the whole modal huge */
#addParamModal #optionsList{
  max-height: 40vh;                 /* the options area itself can scroll */
  overflow: auto;
}

/* The small custom-weight modal can scroll too, just in case */
#customWeightModal .modal-content{
  max-height: calc(100vh - 48px);
  overflow: auto;
}


/* ==========================================================================
   STATISTICS — polished redesign (scoped to .stats-view)
   Drop this at the end of style.css and remove the previous Statistics block.
   Palette is themeable via CSS variables below. Supports dark mode.
   ========================================================================== */
:root {
  /* Base */
  --stats-bg:              #f7f8fb;
  --stats-surface:         #ffffff;
  --stats-border:          rgba(0,0,0,.08);
  --stats-text:            #0f172a; /* slate-900 */
  --stats-muted:           #606776;

  /* Accents (used for charts / accents) */
  --stats-accent-1:        #2563eb; /* indigo-600 */
  --stats-accent-2:        #0ea5e9; /* sky-500 */
  --stats-accent-3:        #22c55e; /* green-500 */
  --stats-accent-4:        #f59e0b; /* amber-500 */
  --stats-accent-5:        #ef4444; /* red-500 */

  /* Effects */
  --stats-shadow-sm:       0 4px 14px rgba(2, 6, 23, .06);
  --stats-shadow-md:       0 8px 28px rgba(2, 6, 23, .08);
  --stats-radius-lg:       16px;
  --stats-radius-md:       12px;
  --stats-blur:            10px;
}

@media (prefers-color-scheme: dark) {
  :root {
    --stats-bg:            #0b0d12;
    --stats-surface:       #12151c;
    --stats-border:        rgba(255,255,255,.06);
    --stats-text:          #e6e9ef;
    --stats-muted:         #9aa3b2;

    --stats-shadow-sm:     0 4px 14px rgba(0,0,0,.4);
    --stats-shadow-md:     0 8px 28px rgba(0,0,0,.45);
  }
}

/* Container background & soft gradient header halo */
.stats-view {
  color: var(--stats-text);
  background: var(--bg);
  padding: 16px;
  border-radius: var(--stats-radius-lg);
  position: relative;
  isolation: isolate;
}
.stats-view::before { content: none; }

/* Header */
.stats-view .stats-header {
  padding: 12px 10px 4px 10px;
}
.stats-view .stats-header h1 {
  margin: 0 0 6px;
  font-size: clamp(22px, 2vw, 28px);
  line-height: 1.15;
  letter-spacing: -0.01em;
  background: linear-gradient(90deg, var(--stats-accent-1), var(--stats-accent-2));
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}
.stats-view .stats-subtitle {
  margin: 0;
  color: var(--stats-muted);
  font-size: 13px;
}

/* Tabs */
.stats-view .stats-tabs {
  display: inline-flex;
  background: color-mix(in srgb, var(--stats-surface) 92%, transparent);
  border: 1px solid var(--stats-border);
  border-radius: 999px;
  padding: 4px;
  gap: 4px;
  margin: 14px 2px 18px;
  box-shadow: var(--stats-shadow-sm);
  backdrop-filter: blur(var(--stats-blur));
}
.stats-view .tab-button {
  appearance: none;
  border: 0;
  background: transparent;
  color: var(--stats-muted);
  font-weight: 700;
  font-size: 12.5px;
  padding: 8px 14px;
  border-radius: 999px;
  cursor: pointer;
  transition: all .18s ease;
}
.stats-view .tab-button:hover {
  color: var(--stats-text);
  transform: translateY(-1px);
}
.stats-view .tab-button.active {
  color: #fff;
  background: linear-gradient(135deg, var(--stats-accent-1), var(--stats-accent-2));
  box-shadow: 0 6px 18px rgba(37,99,235,.28);
}

/* Summary cards */
.stats-view .stats-summary {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(210px, 1fr));
  gap: 12px;
  margin: 8px 0 16px;
}
.stats-view .summary-card {
  background: linear-gradient(180deg,
    color-mix(in srgb, var(--stats-surface) 92%, transparent),
    color-mix(in srgb, var(--stats-surface) 98%, transparent));
  border: 1px solid var(--stats-border);
  border-radius: var(--stats-radius-lg);
  padding: 14px 16px;
  box-shadow: var(--stats-shadow-sm);
  transition: transform .18s ease, box-shadow .18s ease;
  backdrop-filter: blur(var(--stats-blur));
}
.stats-view .summary-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--stats-shadow-md);
}
.stats-view .summary-title {
  font-size: 12px;
  color: var(--stats-muted);
  margin-bottom: 6px;
}
.stats-view .summary-value {
  font-size: clamp(22px, 3.5vw, 30px);
  font-weight: 800;
  letter-spacing: -.02em;
}

/* Split panels (Overview detail) */
.stats-view .split-columns {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 14px;
}
.stats-view .panel {
  background: linear-gradient(180deg,
    color-mix(in srgb, var(--stats-surface) 94%, transparent),
    color-mix(in srgb, var(--stats-surface) 99%, transparent));
  border: 1px solid var(--stats-border);
  border-radius: var(--stats-radius-lg);
  padding: 12px 14px;
  box-shadow: var(--stats-shadow-sm);
  backdrop-filter: blur(var(--stats-blur));
}
.stats-view .panel-title {
  margin: 4px 0 10px;
  font-weight: 800;
  letter-spacing: -.01em;
}

/* Key-Value lists */
.stats-view .kv-list .kv {
  display: grid;
  grid-template-columns: 1fr auto;
  align-items: center;
  gap: 12px;
  padding: 8px 0;
  border-bottom: 1px dashed var(--stats-border);
}
.stats-view .kv-list .kv:last-child { border-bottom: 0; }
.stats-view .kv .k { color: var(--stats-muted); }
.stats-view .kv .v {
  font-weight: 800;
  background: color-mix(in srgb, var(--stats-accent-1) 12%, transparent);
  color: var(--stats-text);
  padding: 2px 8px;
  border-radius: 999px;
}

/* Analytics header */
.stats-view .analytics-toolbar {
  display: flex;
  align-items: center;
  gap: 12px;
  margin: 6px 0 12px;
  flex-wrap: wrap;
}
.stats-view .analytics-toolbar .btn {
  appearance: none;
  border: 0;
  border-radius: 10px;
  padding: 8px 12px;
  font-weight: 800;
  cursor: pointer;
  color: #fff;
  background: linear-gradient(135deg, var(--stats-accent-1), var(--stats-accent-2));
  box-shadow: 0 8px 18px rgba(37,99,235,.28);
  transition: transform .18s ease, box-shadow .18s ease, opacity .18s ease;
}
.stats-view .analytics-toolbar .btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 24px rgba(37,99,235,.34);
}
.stats-view .analytics-toolbar .hint { color: var(--stats-muted); }

/* Stat cards */
.stats-view .stats-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 14px;
}
.stats-view .stat-card {
  border: 1px solid var(--stats-border);
  border-radius: var(--stats-radius-lg);
  background:
    linear-gradient(180deg,
      color-mix(in srgb, var(--stats-surface) 94%, transparent),
      color-mix(in srgb, var(--stats-surface) 99%, transparent));
  box-shadow: var(--stats-shadow-sm);
  overflow: clip;
  animation: stats-rise .35s cubic-bezier(.2,.8,.2,1);
  backdrop-filter: blur(var(--stats-blur));
}
@keyframes stats-rise {
  from { opacity: 0; transform: translateY(6px) scale(.99); }
  to   { opacity: 1; transform: translateY(0)   scale(1); }
}
.stats-view .stat-card-header {
  display: flex;
  justify-content: flex-end;
  padding: 6px;
}
.stats-view .stat-card-close {
  border: 0;
  background: transparent;
  color: var(--stats-muted);
  padding: 6px 10px;
  border-radius: 8px;
  cursor: pointer;
  transition: background .18s ease, color .18s ease;
}
.stats-view .stat-card-close:hover {
  background: color-mix(in srgb, var(--stats-text) 10%, transparent);
  color: var(--stats-text);
}
.stats-view .stat-card-body {
  padding: 12px 14px 16px 14px;
}
.stats-view .stat-title {
  font-weight: 800;
  margin: 2px 0 8px;
  letter-spacing: -.01em;
}

/* Chart color accents by position (uses currentColor from SVG) */
.stats-view .stats-cards .stat-card:nth-child(5n+1) .chart { color: var(--stats-accent-1); }
.stats-view .stats-cards .stat-card:nth-child(5n+2) .chart { color: var(--stats-accent-2); }
.stats-view .stats-cards .stat-card:nth-child(5n+3) .chart { color: var(--stats-accent-3); }
.stats-view .stats-cards .stat-card:nth-child(5n+4) .chart { color: var(--stats-accent-4); }
.stats-view .stats-cards .stat-card:nth-child(5n+5) .chart { color: var(--stats-accent-5); }

.stats-view .chart .empty {
  padding: 10px 0 2px;
  color: var(--stats-muted);
}

/* Inputs (Lat/Lon card) */
.stats-view .form-row.compact {
  display: flex;
  align-items: center;
  gap: 10px;
  flex-wrap: wrap;
  margin-bottom: 8px;
}
.stats-view .form-row.compact label {
  font-size: 12px;
  color: var(--stats-muted);
}
.stats-view .form-row.compact input {
  width: 140px;
  background: var(--stats-surface);
  border: 1px solid var(--stats-border);
  border-radius: 10px;
  padding: 8px 10px;
  color: var(--stats-text);
  outline: none;
  transition: border-color .18s ease, box-shadow .18s ease;
}
.stats-view .form-row.compact input:focus {
  border-color: color-mix(in srgb, var(--stats-accent-1) 50%, var(--stats-border));
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--stats-accent-1) 20%, transparent);
}
.stats-view .btn-primary {
  appearance: none;
  border: 0;
  border-radius: 10px;
  padding: 8px 12px;
  font-weight: 800;
  cursor: pointer;
  color: #fff;
  background: linear-gradient(135deg, var(--stats-accent-3), var(--stats-accent-2));
  box-shadow: 0 8px 18px rgba(14,165,233,.28);
  transition: transform .18s ease, box-shadow .18s ease;
}
.stats-view .btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 24px rgba(14,165,233,.34);
}

/* Result chip */
.stats-view .result {
  background: color-mix(in srgb, var(--stats-accent-3) 10%, transparent);
  border: 1px solid color-mix(in srgb, var(--stats-accent-3) 35%, var(--stats-border));
  color: var(--stats-text);
  padding: 8px 10px;
  border-radius: 12px;
  display: inline-flex;
  gap: 8px;
  align-items: center;
  margin: 2px 0 4px;
}

/* Add-stat menu (popover) */
.stats-view #addStatMenu.stat-menu {
  border: 1px solid var(--stats-border);
  background: color-mix(in srgb, var(--stats-surface) 92%, transparent);
  border-radius: 14px;
  min-width: 280px;
  box-shadow: var(--stats-shadow-md);
  padding: 6px;
  backdrop-filter: blur(var(--stats-blur));
  z-index: 9999;
}
.stats-view .stat-menu .menu-item {
  width: 100%;
  text-align: left;
  border: 0;
  background: transparent;
  color: var(--stats-text);
  padding: 10px 12px;
  border-radius: 10px;
  font-weight: 700;
  cursor: pointer;
  transition: background .15s ease, transform .12s ease;
}
.stats-view .stat-menu .menu-item:hover {
  background: color-mix(in srgb, var(--stats-text) 8%, transparent);
  transform: translateX(2px);
}
.stats-view .stat-menu .menu-sep {
  height: 1px;
  background: var(--stats-border);
  margin: 6px 0;
}
.stats-view .stat-menu .menu-note {
  font-size: 12px;
  color: var(--stats-muted);
  padding: 6px 10px;
}

/* Add at the end of style.css */

/* ─── Login Page ───────────────────────────────────────────────────────── */
.login-page {
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.login-container {
  width: 100%;
  max-width: 450px;
  padding: 20px;
}

.login-card {
  background: white;
  border-radius: 20px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  padding: 40px;
}

.login-title {
  text-align: center;
  font-size: 28px;
  margin: 0 0 30px;
  color: #333;
  font-weight: 700;
}

.auth-form h2 {
  margin: 0 0 20px;
  font-size: 20px;
  color: #333;
}

.btn-block {
  width: 100%;
  margin-top: 20px;
}

.auth-switch {
  text-align: center;
  margin-top: 20px;
  color: #666;
  font-size: 14px;
}

.auth-switch a {
  color: #667eea;
  text-decoration: none;
  font-weight: 600;
}

.auth-switch a:hover {
  text-decoration: underline;
}

/* ─── Users View ────────────────────────────────────────────────────────── */
.users-view {
  padding: 24px;
  max-width: 1400px;
  margin: 0 auto;
}

.users-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.users-header h1 {
  margin: 0;
  font-size: 28px;
  font-weight: 700;
  color: #333;
}

.users-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 24px;
}

.user-card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  padding: 20px;
  position: relative;
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.user-card:hover {
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}

.user-card.admin {
  border-color: #fbbf24;
  background: linear-gradient(to bottom, #fffbeb, white);
}

.user-card.active .user-status {
  color: #059669;
}

.user-status {
  position: absolute;
  top: 20px;
  right: 20px;
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  color: #6b7280;
}

.status-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #d1d5db;
}

.status-active .status-dot {
  background: #10b981;
  box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2); }
  50% { box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.1); }
  100% { box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2); }
}

.user-avatar {
  width: 64px;
  height: 64px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 16px;
}

.user-avatar span {
  color: white;
  font-size: 24px;
  font-weight: 700;
}

.user-info {
  margin-bottom: 20px;
}

.user-name {
  margin: 0 0 4px;
  font-size: 20px;
  font-weight: 600;
  color: #111827;
}

.user-email {
  margin: 0;
  font-size: 14px;
  color: #6b7280;
}

.user-details {
  border-top: 1px solid #e5e7eb;
  padding-top: 16px;
}

.detail-row {
  display: flex;
  justify-content: space-between;
  padding: 8px 0;
  font-size: 14px;
}

.detail-label {
  color: #6b7280;
  font-weight: 500;
}

.detail-value {
  color: #111827;
  font-weight: 600;
}

.password-masked {
  font-family: monospace;
  letter-spacing: 1px;
}

/* ─── Modal Overlay ─────────────────────────────────────────────────────── */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: auto;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #e5e7eb;
}

.modal-header h2 {
  margin: 0;
  font-size: 20px;
  font-weight: 600;
}

.modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
  transition: background 0.2s;
}

.modal-close:hover {
  background: #f3f4f6;
}

.modal-body {
  padding: 20px;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding: 20px;
  border-top: 1px solid #e5e7eb;
}

/* ─── Confirm Modal Styles ─────────────────────────────────────────────── */
.app-confirm-overlay {
  position: fixed;
  inset: 0;
  display: none;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.45);
  z-index: 2147483645;
}

.app-confirm-overlay.show {
  display: flex;
}

.app-confirm-modal {
  max-width: 420px;
  width: calc(100% - 32px);
  background: #fff;
  border-radius: 14px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
  padding: 20px;
  font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
}

.app-confirm-title {
  margin: 0 0 12px;
  font-size: 18px;
  font-weight: 600;
}

.app-confirm-message {
  margin: 0 0 20px;
  white-space: pre-wrap;
  word-wrap: break-word;
  line-height: 1.4;
}

.app-confirm-actions {
  display: flex;
  justify-content: flex-end;
  gap: 8px;
}

.app-confirm-btn {
  appearance: none;
  border: 0;
  border-radius: 10px;
  padding: 10px 14px;
  font-weight: 600;
  cursor: pointer;
  font-size: 14px;
}

.app-confirm-cancel {
  background: #f3f4f6;
  color: #374151;
}

.app-confirm-cancel:hover {
  background: #e5e7eb;
}

.app-confirm-ok {
  background: #111;
  color: #fff;
}

.app-confirm-ok:hover {
  background: #000;
}

.app-confirm--danger .app-confirm-ok {
  background: #dc2626;
}

.app-confirm--danger .app-confirm-ok:hover {
  background: #b91c1c;
}

/* Ensure the repairs tab and containers are properly constrained */
.stats-view {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}

#repairsTab {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}

.repairs-tables {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}

/* Panel container */
.repairs-tables .panel {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
  margin-top: 0;
}

/* The key container for scrolling */
.table-scroll {
  width: 100%;
  max-width: 100%;
  max-height: 400px;
  overflow-x: auto;  /* Enable horizontal scrolling */
  overflow-y: auto;  /* Enable vertical scrolling */
  border: 1px solid var(--border-color, #ddd);
  border-radius: 4px;
  position: relative;
  box-sizing: border-box;
}

/* Set minimum width for the table to ensure it doesn't compress */
.data-table {
  min-width: 1200px;  /* Minimum width to trigger horizontal scroll */
  width: auto;        /* Allow table to expand based on content */
  border-collapse: collapse;
  font-size: 13px;
  table-layout: fixed;  /* Use fixed layout for better performance */
}

/* Sticky header for vertical scrolling */
.data-table thead {
  position: sticky;
  top: 0;
  background: var(--bg-secondary, #f5f5f5);
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* Column widths - adjust these based on your needs */
.data-table th,
.data-table td {
  padding: 8px 10px;
  text-align: left;
  border-bottom: 1px solid var(--border-light, #eee);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Specific column widths for better control */
.data-table th:nth-child(1),
.data-table td:nth-child(1) { width: 45px; }   /* Checkbox */
.data-table th:nth-child(2),
.data-table td:nth-child(2) { width: 100px; }  /* Date */
.data-table th:nth-child(3),
.data-table td:nth-child(3) { width: 120px; }  /* Station ID */
.data-table th:nth-child(4),
.data-table td:nth-child(4) { width: 150px; }  /* Location */
.data-table th:nth-child(5),
.data-table td:nth-child(5) { width: 150px; }  /* Asset Type */
.data-table th:nth-child(6),
.data-table td:nth-child(6) { width: 200px; }  /* Name/Item */
.data-table th:nth-child(7),
.data-table td:nth-child(7) { width: 100px; }  /* Severity */
.data-table th:nth-child(8),
.data-table td:nth-child(8) { width: 100px; }  /* Priority */
.data-table th:nth-child(9),
.data-table td:nth-child(9) { width: 120px; }  /* Cost */
.data-table th:nth-child(10),
.data-table td:nth-child(10) { width: 100px; } /* Category */
.data-table th:nth-child(11),
.data-table td:nth-child(11) { width: 80px; }  /* Days */

/* Header styling */
.data-table th {
  font-weight: 600;
  background: var(--bg-secondary, #f5f5f5);
  border-bottom: 2px solid var(--border-color, #ddd);
}

/* Row hover effect */
.data-table tbody tr:hover {
  background: var(--hover-bg, #f9f9f9);
}

/* Scrollbar styling for better visibility */
.table-scroll::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

.table-scroll::-webkit-scrollbar-track {
  background: var(--bg-light, #f1f1f1);
  border-radius: 4px;
}

.table-scroll::-webkit-scrollbar-thumb {
  background: var(--scrollbar-thumb, #888);
  border-radius: 4px;
}

.table-scroll::-webkit-scrollbar-thumb:hover {
  background: var(--scrollbar-thumb-hover, #555);
}

.table-scroll::-webkit-scrollbar-corner {
  background: var(--bg-light, #f1f1f1);
}

/* Pagination controls below table */
.pagination-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px;
  border-top: 1px solid var(--border-color, #ddd);
  background: var(--bg-secondary, #f9f9f9);
  width: 100%;
  box-sizing: border-box;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .table-scroll {
    max-height: 300px;
  }
  
  .data-table {
    font-size: 12px;
  }
  
  .data-table th,
  .data-table td {
    padding: 6px 8px;
  }
}


Amongus:

I dont like how it the maintenance and repair tables are currently implemented. it is still extremely laggy.
Remove the multiple pages functionality, and implement a virtualized table helper:

based on how it was implemented for this other part of the program(add_infra.js)

~~

See all necessary code below:

// frontend/js/dashboard.js
(function () {
  'use strict';

  // ---- Helpers -------------------------------------------------------------

  const $ = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
  const esc = (s) => String(s ?? '').replace(/[&<>"]/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));
  const hasStatsDOM = () => !!document.getElementById('statisticsPage');

  const getFieldValue = (row, fieldName) => {
    // Finds "Inspection Frequency" or any "Section – Inspection Frequency" etc., case-insensitive
    const target = String(fieldName).toLowerCase();
    for (const k of Object.keys(row || {})) {
      if (!k) continue;
      if (String(k).toLowerCase() === target) return row[k];
    }
    for (const k of Object.keys(row || {})) {
      if (k.includes(' – ')) {
        const parts = k.split(' – ');
        const last = parts[parts.length - 1];
        if (String(last).toLowerCase() === target) return row[k];
      }
    }
    return '';
  };

  const normStr = (s) => String(s ?? '').trim();
  const stationLocation = (s) => normStr(s.province || s.location || s.location_file);
  const stationAssetType = (s) => normStr(s.asset_type);

  // Haversine distance in km
  function haversineKm(lat1, lon1, lat2, lon2) {
    const toRad = (d) => (d * Math.PI) / 180;
    const R = 6371;
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) ** 2 +
      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;
    return 2 * R * Math.asin(Math.sqrt(a));
  }

  // Basic, dependency-free bar chart
  function renderBarChart(container, dataPairs, opts = {}) {
    // dataPairs: [{ label, value }]
    container.innerHTML = '';
    const width = Math.max(320, container.clientWidth || 600);
    const height = opts.height || 240;
    const padL = 40, padR = 12, padT = 10, padB = 28;

    const W = width, H = height;
    const plotW = W - padL - padR;
    const plotH = H - padT - padB;

    const maxVal = Math.max(1, ...dataPairs.map(d => +d.value || 0));
    const barGap = 8;
    const n = dataPairs.length || 1;
    const barW = Math.max(6, (plotW - (n - 1) * barGap) / n);

    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', W);
    svg.setAttribute('height', H);
    svg.setAttribute('role', 'img');
    svg.setAttribute('aria-label', esc(opts.ariaLabel || 'Bar chart'));

    // Y axis line
    const yAxis = document.createElementNS(svg.namespaceURI, 'line');
    yAxis.setAttribute('x1', padL);
    yAxis.setAttribute('x2', padL);
    yAxis.setAttribute('y1', padT);
    yAxis.setAttribute('y2', padT + plotH);
    yAxis.setAttribute('stroke', 'currentColor');
    yAxis.setAttribute('stroke-opacity', '0.35');
    svg.appendChild(yAxis);

    // Bars + labels
    dataPairs.forEach((d, i) => {
      const v = (+d.value || 0);
      const h = Math.round((v / maxVal) * plotH);
      const x = padL + i * (barW + barGap);
      const y = padT + (plotH - h);

      const rect = document.createElementNS(svg.namespaceURI, 'rect');
      rect.setAttribute('x', x);
      rect.setAttribute('y', y);
      rect.setAttribute('width', barW);
      rect.setAttribute('height', h);
      rect.setAttribute('fill', 'currentColor');
      rect.setAttribute('fill-opacity', '0.8');
      svg.appendChild(rect);

      // Value label
      const tv = document.createElementNS(svg.namespaceURI, 'text');
      tv.setAttribute('x', x + barW / 2);
      tv.setAttribute('y', y - 4);
      tv.setAttribute('text-anchor', 'middle');
      tv.setAttribute('font-size', '10');
      tv.textContent = String(v);
      svg.appendChild(tv);

      // X labels (rotate if long)
      const tl = document.createElementNS(svg.namespaceURI, 'text');
      tl.setAttribute('x', x + barW / 2);
      tl.setAttribute('y', padT + plotH + 14);
      tl.setAttribute('text-anchor', 'end');
      tl.setAttribute('transform', `rotate(-30, ${x + barW / 2}, ${padT + plotH + 14})`);
      tl.setAttribute('font-size', '10');
      tl.textContent = String(d.label);
      svg.appendChild(tl);
    });

    container.appendChild(svg);
  }

  // ---- State ---------------------------------------------------------------

  const state = {
    allStations: [],
    filteredStations: [],
    lookupTree: null,
    cards: [],
    initialized: false
  };

  // ---- Filters integration (Analytics only) --------------------------------

  function readActiveFilters() {
    const tree = $('#filterTree');
    if (!tree) return { locations: null, assetsByLocation: new Map() };

    // Selected locations
    const locCbs = $$('input.location', tree);
    const checkedLocs = new Set(locCbs.filter(cb => cb.checked).map(cb => cb.value));

    // Selected asset types per location (only if not all are selected)
    const assetsByLoc = new Map();
    const locMap = new Map(); // quick map of location -> all asset type checkboxes under it
    $$('.ft-location', tree).forEach(locDetails => {
      const locCb = $('input.location', locDetails);
      if (!locCb) return;
      const atCbs = $$('input.asset-type', locDetails);
      locMap.set(locCb.value, atCbs);
    });

    for (const [loc, atCbs] of locMap.entries()) {
      if (!checkedLocs.has(loc)) continue;
      const checked = atCbs.filter(cb => cb.checked).map(cb => cb.value);
      if (checked.length && checked.length !== atCbs.length) {
        assetsByLoc.set(loc, new Set(checked));
      }
    }

    return { locations: checkedLocs, assetsByLocation: assetsByLoc };
  }

  function applyAnalyticsFilters() {
    const { locations, assetsByLocation } = readActiveFilters();

    if (!locations || locations.size === 0) {
      state.filteredStations = [];
      return;
    }

    const matches = (s) => {
      const loc = stationLocation(s);
      if (!loc || !locations.has(loc)) return false;
      const set = assetsByLocation.get(loc);
      if (!set || set.size === 0) return true; // no AT filter for this location
      return set.has(stationAssetType(s));
    };

    state.filteredStations = state.allStations.filter(matches);
  }

  function onFiltersChanged() {
    applyAnalyticsFilters();
    // Re-render all analytics cards
    state.cards.forEach(c => c.update());
  }

  // ---- Overview (unfiltered) -----------------------------------------------

  function computeOverview() {
    const all = state.allStations;

    const byLoc = new Map();
    const byCo  = new Map();

    // Build location -> count
    all.forEach(s => {
      const loc = stationLocation(s);
      if (!loc) return;
      byLoc.set(loc, (byLoc.get(loc) || 0) + 1);
    });

    // Derive company counts from lookup tree: sum counts of their locations
    const companies = (state.lookupTree?.companies || []);
    const locsByCompany = state.lookupTree?.locationsByCompany || {};
    companies.forEach(co => {
      let sum = 0;
      (locsByCompany[co] || []).forEach(loc => { sum += (byLoc.get(loc) || 0); });
      // Even if a company has 0 (no stations yet), we still show it.
      byCo.set(co, sum);
    });

    return {
      totalStations: all.length,
      totalLocations: byLoc.size,
      totalCompanies: companies.length,
      byLocation: Array.from(byLoc.entries()).sort((a,b)=>a[0].localeCompare(b[0])),
      byCompany: Array.from(byCo.entries()).sort((a,b)=>a[0].localeCompare(b[0]))
    };
  }

  function renderOverview() {
    const ov = computeOverview();
    $('#ovTotalStations').textContent = String(ov.totalStations);
    $('#ovTotalLocations').textContent = String(ov.totalLocations);
    $('#ovTotalCompanies').textContent = String(ov.totalCompanies);

    const locWrap = $('#ovByLocation');
    locWrap.innerHTML = '';
    ov.byLocation.forEach(([loc, n]) => {
      const row = document.createElement('div');
      row.className = 'kv';
      row.innerHTML = `<div class="k">Total ${esc(loc)}</div><div class="v">${n}</div>`;
      locWrap.appendChild(row);
    });

    const coWrap = $('#ovByCompany');
    coWrap.innerHTML = '';
    ov.byCompany.forEach(([co, n]) => {
      const row = document.createElement('div');
      row.className = 'kv';
      row.innerHTML = `<div class="k">Total ${esc(co)}</div><div class="v">${n}</div>`;
      coWrap.appendChild(row);
    });
  }

  // ---- Analytics cards -----------------------------------------------------

  function addCard(node, updater) {
    const list = $('#statsCards');
    const wrap = document.createElement('div');
    wrap.className = 'stat-card';
    const header = document.createElement('div');
    header.className = 'stat-card-header';
    const body = document.createElement('div');
    body.className = 'stat-card-body';
    const closeBtn = document.createElement('button');
    closeBtn.className = 'btn btn-ghost stat-card-close';
    closeBtn.textContent = '✕';
    closeBtn.title = 'Remove';
    closeBtn.addEventListener('click', () => {
      wrap.remove();
      state.cards = state.cards.filter(c => c.wrap !== wrap);
    });

    header.appendChild(closeBtn);
    wrap.appendChild(header);
    body.appendChild(node);
    wrap.appendChild(body);
    list.appendChild(wrap);

    const card = { wrap, update: updater };
    state.cards.push(card);
    updater();
    return card;
  }

  // -- Card: Province bar chart
  function createProvinceCard() {
    const root = document.createElement('div');
    root.innerHTML = `
      <div class="stat-title">Stations per Province</div>
      <div class="chart" style="width:100%;" aria-label="Province chart"></div>
    `;
    const chart = $('.chart', root);

    const update = () => {
      const data = state.filteredStations;
      const counts = new Map();
      data.forEach(s => {
        const loc = stationLocation(s);
        if (!loc) return;
        counts.set(loc, (counts.get(loc) || 0) + 1);
      });
      const items = Array.from(counts.entries()).sort((a,b)=>a[0].localeCompare(b[0]))
        .map(([label, value]) => ({ label, value }));
      chart.innerHTML = '';
      if (!items.length) {
        chart.innerHTML = '<div class="empty">No data (adjust filters)</div>';
        return;
      }
      renderBarChart(chart, items, { ariaLabel: 'Stations per province' });
    };

    return addCard(root, update);
  }

  // -- Card: Inspection Frequency bar chart
  function createInspectionFrequencyCard() {
    const root = document.createElement('div');
    root.innerHTML = `
      <div class="stat-title">Stations by Inspection Frequency</div>
      <div class="chart" style="width:100%;" aria-label="Inspection Frequency chart"></div>
      <div class="hint">Looks for a column named “Inspection Frequency” (any section).</div>
    `;
    const chart = $('.chart', root);

    const update = () => {
      const data = state.filteredStations;
      const counts = new Map();
      data.forEach(s => {
        let v = getFieldValue(s, 'Inspection Frequency');
        v = normStr(v) || 'Unknown';
        counts.set(v, (counts.get(v) || 0) + 1);
      });
      const items = Array.from(counts.entries()).sort((a,b)=>a[0].localeCompare(b[0]))
        .map(([label, value]) => ({ label, value }));
      chart.innerHTML = '';
      if (!items.length) {
        chart.innerHTML = '<div class="empty">No data (adjust filters)</div>';
        return;
      }
      renderBarChart(chart, items, { ariaLabel: 'Stations by inspection frequency' });
    };

    return addCard(root, update);
  }

  // -- Card: Lat/Lon radius count
  function createLatLonCard() {
    const root = document.createElement('div');
    root.innerHTML = `
      <div class="stat-title">Count within radius</div>
      <div class="form-row compact">
        <label>Latitude</label>
        <input type="number" step="0.000001" class="in-lat" placeholder="49.2827">
        <label>Longitude</label>
        <input type="number" step="0.000001" class="in-lon" placeholder="-123.1207">
        <label>Radius (km)</label>
        <input type="number" step="0.1" class="in-rad" placeholder="10" value="10">
        <button class="btn btn-primary btn-run">Compute</button>
      </div>
      <div class="result"><strong>Stations in circle:</strong> <span class="out">—</span></div>
      <div class="hint">Uses the current filters. Change inputs and click Compute.</div>
    `;
    const out = $('.result .out', root);
    const latIn = $('.in-lat', root);
    const lonIn = $('.in-lon', root);
    const radIn = $('.in-rad', root);
    const runBtn = $('.btn-run', root);

    // Provide a sane default center (mean of filtered lat/lon if available)
    const seedDefaults = () => {
      const pts = state.filteredStations
        .map(s => ({ lat: parseFloat(s.lat), lon: parseFloat(s.lon) }))
        .filter(p => Number.isFinite(p.lat) && Number.isFinite(p.lon));
      if (!pts.length) return;
      const avgLat = pts.reduce((a,b)=>a+b.lat,0)/pts.length;
      const avgLon = pts.reduce((a,b)=>a+b.lon,0)/pts.length;
      if (!latIn.value) latIn.value = String(avgLat.toFixed(6));
      if (!lonIn.value) lonIn.value = String(avgLon.toFixed(6));
    };

    const compute = () => {
      const lat = parseFloat(latIn.value);
      const lon = parseFloat(lonIn.value);
      const rad = Math.max(0, parseFloat(radIn.value));
      if (!Number.isFinite(lat) || !Number.isFinite(lon) || !Number.isFinite(rad)) {
        out.textContent = '—';
        return;
      }
      let n = 0;
      for (const s of state.filteredStations) {
        const a = parseFloat(s.lat), b = parseFloat(s.lon);
        if (!Number.isFinite(a) || !Number.isFinite(b)) continue;
        if (haversineKm(lat, lon, a, b) <= rad) n++;
      }
      out.textContent = String(n);
    };

    runBtn.addEventListener('click', compute);

    const update = () => {
      // try to seed reasonable center; do not auto-compute to avoid surprises
      seedDefaults();
      out.textContent = '—';
    };

    return addCard(root, update);
  }

  // ---- Add-stat popup ------------------------------------------------------

  function openAddStatMenu(anchor) {
    const menu = $('#addStatMenu');
    if (!menu) return;
    const rect = anchor.getBoundingClientRect();
    menu.style.display = 'block';
    menu.style.position = 'fixed';
    menu.style.top = (rect.bottom + 6) + 'px';
    menu.style.left = rect.left + 'px';

    const onDoc = (e) => {
      if (!menu.contains(e.target) && e.target !== anchor) close();
    };
    const close = () => {
      menu.style.display = 'none';
      document.removeEventListener('click', onDoc, true);
    };

    setTimeout(() => document.addEventListener('click', onDoc, true), 0);

    $$('.menu-item', menu).forEach(btn => {
      btn.onclick = () => {
        const kind = btn.dataset.kind;
        if (kind === 'province') createProvinceCard();
        else if (kind === 'inspection_frequency') createInspectionFrequencyCard();
        else if (kind === 'latlon') createLatLonCard();
        // FUTURE: add more cases here to introduce new stats
        close();
      };
    });
  }

  // ---- Repairs and Maintenance Tab ---------------------------------------
  
  let repairsState = {
    allRepairs: [],
    selectedRepairs: new Set(),
    selectedMaintenance: new Set(),
    repairsPage: 1,
    maintenancePage: 1,
    pageSize: 10  // Show 10 items per page
  };
  let stationsList = [];

  async function loadRepairsData() {
    try {
      const repairs = await window.electronAPI.getAllRepairs();
      repairsState.allRepairs = Array.isArray(repairs) ? repairs : [];
      repairsState.repairsPage = 1;  // Reset to page 1
      repairsState.maintenancePage = 1;
      renderRepairsTables();
    } catch (e) {
      console.error('[dashboard:repairs] Failed to load repairs:', e);
      repairsState.allRepairs = [];
    }
  }

  // Expose globally for other views to refresh
  window.loadRepairsData = loadRepairsData;

  function renderRepairsTables() {
    renderRepairsTable();
    renderMaintenanceTable();
  }

  // Replace the updatePaginationControls function in dashboard.js with this version:

  function updatePaginationControls(type, currentPage, totalPages, totalItems) {
    const tableId = type === 'repairs' ? 'globalRepairsTable' : 'globalMaintenanceTable';
    const table = $(`#${tableId}`);
    if (!table) return;
  
    // Find the panel container
    const panel = table.closest('.panel');
    if (!panel) return;

    // Remove existing pagination
    let paginationDiv = panel.querySelector('.pagination-controls');
    if (paginationDiv) paginationDiv.remove();
  
    // Create new pagination
    paginationDiv = document.createElement('div');
    paginationDiv.className = 'pagination-controls';
  
    const startItem = (currentPage - 1) * repairsState.pageSize + 1;
    const endItem = Math.min(currentPage * repairsState.pageSize, totalItems);
  
    paginationDiv.innerHTML = `
      <div class="pagination-info">
        Showing ${startItem}-${endItem} of ${totalItems} items
      </div>
      <div class="pagination-buttons">
        <button class="btn btn-ghost" id="${type}PrevPage" ${currentPage === 1 ? 'disabled' : ''}>← Previous</button>
        <span style="padding:0 12px;line-height:32px;font-size:13px;">Page ${currentPage} of ${totalPages || 1}</span>
        <button class="btn btn-ghost" id="${type}NextPage" ${currentPage >= totalPages ? 'disabled' : ''}>Next →</button>
      </div>
    `;
  
    // IMPORTANT: Insert pagination AFTER the table-scroll container, not after the panel
    const tableScroll = panel.querySelector('.table-scroll');
    if (tableScroll && tableScroll.nextSibling) {
      panel.insertBefore(paginationDiv, tableScroll.nextSibling);
    } else {
      panel.appendChild(paginationDiv);
    }
    
    // Force a reflow to ensure CSS is applied
    panel.offsetHeight;
    
    // Ensure table scroll container maintains its constraints
    if (tableScroll) {
      tableScroll.style.overflowX = 'auto';
      tableScroll.style.overflowY = 'auto';
      tableScroll.style.maxWidth = '100%';
      tableScroll.style.width = '100%';
    }
  
    // Wire up pagination buttons with null checks
    const prevBtn = $(`#${type}PrevPage`);
    const nextBtn = $(`#${type}NextPage`);
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (type === 'repairs') {
          repairsState.repairsPage = Math.max(1, repairsState.repairsPage - 1);
          renderRepairsTable();
        } else {
          repairsState.maintenancePage = Math.max(1, repairsState.maintenancePage - 1);
          renderMaintenanceTable();
        }
      });
    }
  
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (type === 'repairs') {
          repairsState.repairsPage = Math.min(totalPages, repairsState.repairsPage + 1);
          renderRepairsTable();
        } else {
          repairsState.maintenancePage = Math.min(totalPages, repairsState.maintenancePage + 1);
          renderMaintenanceTable();
        }
      });
    }
  }

  // Also update renderRepairsTable to ensure constraints after rendering:
  function renderRepairsTable() {
    const repairsBody = $('#globalRepairsBody');
    if (!repairsBody) return;
    
    const repairs = repairsState.allRepairs.filter(r => r.type !== 'Monitoring');
    const totalPages = Math.ceil(repairs.length / repairsState.pageSize);
    const startIdx = (repairsState.repairsPage - 1) * repairsState.pageSize;
    const endIdx = startIdx + repairsState.pageSize;
    const pageRepairs = repairs.slice(startIdx, endIdx);
    
    repairsBody.innerHTML = '';
    
    pageRepairs.forEach((repair, idx) => {
      const globalIdx = startIdx + idx;
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><input type="checkbox" class="repair-checkbox" data-repair-id="${globalIdx}" /></td>
        <td>${esc(repair.date || '')}</td>
        <td>${esc(repair.station_id || '')}</td>
        <td>${esc(repair.location || '')}</td>
        <td>${esc(repair.assetType || '')}</td>
        <td>${esc(repair.name || '')}</td>
        <td>${esc(repair.severity || '')}</td>
        <td>${esc(repair.priority || '')}</td>
        <td>${formatCost(repair.cost)}</td>
        <td>${esc(repair.category || '')}</td>
        <td>${esc(repair.days || '')}</td>
      `;
      const checkbox = tr.querySelector('.repair-checkbox');
      checkbox.checked = repairsState.selectedRepairs.has(repair);
      checkbox.addEventListener('change', (e) => {
        if (e.target.checked) repairsState.selectedRepairs.add(repair);
        else repairsState.selectedRepairs.delete(repair);
      });
      repairsBody.appendChild(tr);
    });
    
    updatePaginationControls('repairs', repairsState.repairsPage, totalPages, repairs.length);
    
    // Ensure table constraints are maintained after render
    const tableScroll = $('#globalRepairsTable').closest('.table-scroll');
    if (tableScroll) {
      // Force the scroll container to maintain its constraints
      tableScroll.style.display = 'block';
      tableScroll.style.overflowX = 'auto';
      tableScroll.style.overflowY = 'auto';
      tableScroll.style.maxWidth = '100%';
      tableScroll.style.width = '100%';
      tableScroll.style.boxSizing = 'border-box';
    }
  }

  function renderMaintenanceTable() {
    const maintenanceBody = $('#globalMaintenanceBody');
    if (!maintenanceBody) return;
    
    const maintenance = repairsState.allRepairs.filter(r => r.type === 'Monitoring');
    const totalPages = Math.ceil(maintenance.length / repairsState.pageSize);
    const startIdx = (repairsState.maintenancePage - 1) * repairsState.pageSize;
    const endIdx = startIdx + repairsState.pageSize;
    const pageMaintenance = maintenance.slice(startIdx, endIdx);
    
    maintenanceBody.innerHTML = '';
    
    pageMaintenance.forEach((item, idx) => {
      const globalIdx = startIdx + idx;
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><input type="checkbox" class="maintenance-checkbox" data-maintenance-id="${globalIdx}" /></td>
        <td>${esc(item.date || '')}</td>
        <td>${esc(item.station_id || '')}</td>
        <td>${esc(item.location || '')}</td>
        <td>${esc(item.assetType || '')}</td>
        <td>${esc(item.name || '')}</td>
        <td>${esc(item.severity || '')}</td>
        <td>${esc(item.priority || '')}</td>
        <td>${formatCost(item.cost)}</td>
        <td>${esc(item.category || '')}</td>
        <td>${esc(item.days || '')}</td>
      `;
      const checkbox = tr.querySelector('.maintenance-checkbox');
      checkbox.checked = repairsState.selectedMaintenance.has(item);
      checkbox.addEventListener('change', (e) => {
        if (e.target.checked) repairsState.selectedMaintenance.add(item);
        else repairsState.selectedMaintenance.delete(item);
      });
      maintenanceBody.appendChild(tr);
    });
  
    updatePaginationControls('maintenance', repairsState.maintenancePage, totalPages, maintenance.length);
    
    // Ensure table constraints are maintained after render
    const tableScroll = $('#globalMaintenanceTable').closest('.table-scroll');
    if (tableScroll) {
      // Force the scroll container to maintain its constraints
      tableScroll.style.display = 'block';
      tableScroll.style.overflowX = 'auto';
      tableScroll.style.overflowY = 'auto';
      tableScroll.style.maxWidth = '100%';
      tableScroll.style.width = '100%';
      tableScroll.style.boxSizing = 'border-box';
    }
  }

  function updatePaginationControls(type, currentPage, totalPages, totalItems) {
    const tableId = type === 'repairs' ? 'globalRepairsTable' : 'globalMaintenanceTable';
    const table = $(`#${tableId}`);
    if (!table) return;
  
    // Find the panel container
    const panel = table.closest('.panel');
    if (!panel) return;

    // Remove existing pagination
    let paginationDiv = panel.querySelector('.pagination-controls');
    if (paginationDiv) paginationDiv.remove();
  
    // Create new pagination
    paginationDiv = document.createElement('div');
    paginationDiv.className = 'pagination-controls';
  
    const startItem = (currentPage - 1) * repairsState.pageSize + 1;
    const endItem = Math.min(currentPage * repairsState.pageSize, totalItems);
  
    paginationDiv.innerHTML = `
      <div class="pagination-info">
        Showing ${startItem}-${endItem} of ${totalItems} items
      </div>
      <div class="pagination-buttons">
        <button class="btn btn-ghost" id="${type}PrevPage" ${currentPage === 1 ? 'disabled' : ''}>← Previous</button>
        <span style="padding:0 12px;line-height:32px;font-size:13px;">Page ${currentPage} of ${totalPages || 1}</span>
        <button class="btn btn-ghost" id="${type}NextPage" ${currentPage >= totalPages ? 'disabled' : ''}>Next →</button>
      </div>
    `;
  
    // IMPORTANT: Insert pagination AFTER the table-scroll container, not after the panel
    const tableScroll = panel.querySelector('.table-scroll');
    if (tableScroll && tableScroll.nextSibling) {
      panel.insertBefore(paginationDiv, tableScroll.nextSibling);
    } else {
      panel.appendChild(paginationDiv);
    }
    
    // Force a reflow to ensure CSS is applied
    panel.offsetHeight;
    
    // Ensure table scroll container maintains its constraints
    if (tableScroll) {
      tableScroll.style.overflowX = 'auto';
      tableScroll.style.overflowY = 'auto';
      tableScroll.style.maxWidth = '100%';
      tableScroll.style.width = '100%';
    }
  
    // Wire up pagination buttons with null checks
    const prevBtn = $(`#${type}PrevPage`);
    const nextBtn = $(`#${type}NextPage`);
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (type === 'repairs') {
          repairsState.repairsPage = Math.max(1, repairsState.repairsPage - 1);
          renderRepairsTable();
        } else {
          repairsState.maintenancePage = Math.max(1, repairsState.maintenancePage - 1);
          renderMaintenanceTable();
        }
      });
    }
  
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (type === 'repairs') {
          repairsState.repairsPage = Math.min(totalPages, repairsState.repairsPage + 1);
          renderRepairsTable();
        } else {
          repairsState.maintenancePage = Math.min(totalPages, repairsState.maintenancePage + 1);
          renderMaintenanceTable();
        }
      });
    }
  }

  function formatCost(cost) {
    if (typeof cost === 'number' && Number.isFinite(cost)) {
      return `$${cost.toLocaleString()}`;
    }
    return String(cost || '—');
  }

  function openGlobalRepairModal() {
    const modal = $('#globalRepairModal');
    if (!modal) return;

    // Load stations list for validation
    window.electronAPI.getStationData({}).then(data => { stationsList = data || []; });
    
    // Get available filters from the tree
    const filterOptions = getFilteredAssetTypes();
    
    modal.innerHTML = `
      <div class="modal-content" style="max-width:680px;width:92%;">
        <h3 style="margin-top:0;">Add Repair/Maintenance</h3>
        <div class="form-grid" style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;">
          <div class="form-row" style="grid-column: 1 / 4;">
            <label>Company</label>
            <select id="grCompany">
              <option value="">Select Company...</option>
              ${filterOptions.companies.map(c => `<option value="${c}">${c}</option>`).join('')}
            </select>
          </div>
          <div class="form-row" style="grid-column: 1 / 4;">
            <label>Location</label>
            <select id="grLocation" disabled>
              <option value="">Select Company first...</option>
            </select>
          </div>
          <div class="form-row" style="grid-column: 1 / 4;">
            <label>Asset Type</label>
            <select id="grAssetType" disabled>
              <option value="">Select Location first...</option>
            </select>
          </div>
          <div class="form-row" style="grid-column: 1 / 4;">
            <label>Station ID *</label>
            <select id="grStationId" disabled>
              <option value="">Select Asset Type first...</option>
            </select>
          </div>
          <div class="form-row" style="grid-column: 1 / 4;">
            <label>Name *</label>
            <input id="grName" type="text" placeholder="Repair/Maintenance name" />
          </div>
          <div class="form-row">
            <label>Severity</label>
            <input id="grSeverity" type="text" placeholder="Low/Medium/High" />
          </div>
          <div class="form-row">
            <label>Priority</label>
            <input id="grPriority" type="text" placeholder="1-5" />
          </div>
          <div class="form-row">
            <label>Cost</label>
            <input id="grCost" type="text" placeholder="15000" />
          </div>
          <div class="form-row">
            <label>Days</label>
            <input id="grDays" type="text" placeholder="5" />
          </div>
          <div class="form-row">
            <label>Category</label>
            <select id="grCategory">
              <option value="Capital">Capital</option>
              <option value="O&M">O&M</option>
            </select>
          </div>
          <div class="form-row">
            <label>Type</label>
            <select id="grType">
              <option value="Repair">Repair</option>
              <option value="Monitoring">Monitoring</option>
            </select>
          </div>
        </div>
        <div class="modal-actions" style="display:flex;gap:8px;justify-content:flex-end;margin-top:12px;">
          <button id="grCreate" class="btn btn-primary">Add</button>
          <button id="grCancel" class="btn btn-ghost">Cancel</button>
        </div>
      </div>
    `;
    
    modal.style.display = 'flex';
    
    // Wire up cascading dropdowns
    const companySelect = $('#grCompany');
    const locationSelect = $('#grLocation');
    const assetTypeSelect = $('#grAssetType');
    const stationSelect = $('#grStationId');
    
    companySelect.addEventListener('change', () => {
      const company = companySelect.value;
      locationSelect.innerHTML = '<option value="">Select Location...</option>';
      assetTypeSelect.innerHTML = '<option value="">Select Asset Type...</option>';
      assetTypeSelect.disabled = true;
      
      if (company) {
        const locations = filterOptions.locationsByCompany[company] || [];
        locations.forEach(loc => {
          const opt = document.createElement('option');
          opt.value = loc;
          opt.textContent = loc;
          locationSelect.appendChild(opt);
        });
        locationSelect.disabled = false;
      } else {
        locationSelect.disabled = true;
      }
    });
    
    locationSelect.addEventListener('change', () => {
      const location = locationSelect.value;
      assetTypeSelect.innerHTML = '<option value="">Select Asset Type...</option>';
      
      if (location) {
        const assetTypes = filterOptions.assetTypesByLocation[location] || [];
        assetTypes.forEach(at => {
          const opt = document.createElement('option');
          opt.value = at;
          opt.textContent = at;
          assetTypeSelect.appendChild(opt);
        });
        assetTypeSelect.disabled = false;
      } else {
        assetTypeSelect.disabled = true;
      }
    });

    assetTypeSelect.addEventListener('change', () => {
      const location = locationSelect.value;
      const assetType = assetTypeSelect.value;
      stationSelect.innerHTML = '<option value="">Select Station...</option>';
      
      if (location && assetType) {
        // Filter stations by location and asset type
        const validStations = stationsList.filter(s => 
          (s.location_file === location || s.province === location) && 
          s.asset_type === assetType
        );
        validStations.forEach(st => {
          const opt = document.createElement('option');
          // Store just the station ID as the value
          opt.value = String(st.station_id).trim();
          opt.textContent = `${st.station_id} - ${st.name || ''}`;
          stationSelect.appendChild(opt);
        });
        stationSelect.disabled = false;
      } else {
        stationSelect.disabled = true;
      }
    });
    
    // Wire up buttons
    $('#grCancel').addEventListener('click', () => {
      modal.style.display = 'none';
    });
    
    $('#grCreate').addEventListener('click', async () => {
      const location = $('#grLocation').value;
      const assetType = $('#grAssetType').value;
      // Ensure we get just the station ID value, not the display text
      const stationId = String($('#grStationId').value).trim();
      const repair = {
        'Station ID': stationId,  // This must match what backend expects
        'station_id': stationId,  // Also include lowercase version for compatibility
        'Repair Name': $('#grName').value,  // Excel expects 'Repair Name'
        name: $('#grName').value,            // Keep for compatibility
        severity: $('#grSeverity').value,
        priority: $('#grPriority').value,
        cost: $('#grCost').value,
        category: $('#grCategory').value,
        type: $('#grType').value,
        days: $('#grDays').value
      };
      
      if (!location || !assetType || !stationId || !repair.name) {
        appAlert('Please fill in all required fields');
        return;
      }
      
      // Validate station exists
      const stationExists = stationsList.some(s => 
        s.station_id === stationId && 
        (s.location_file === location || s.province === location) &&
        s.asset_type === assetType
      );
      
      if (!stationExists) {
        appAlert('Invalid Station ID. Please select a valid station.');
        return;
      }
      
      // Get company from the selected company dropdown
      const company = $('#grCompany').value;
      
      // Call the correct IPC function with proper structure
      const result = await window.electronAPI.appendRepair({ company, location, assetType, repair });

      if (!result.success) {
        appAlert('Failed to add repair: ' + (result.message || 'Unknown error'));
        return;
      }
      modal.style.display = 'none';
      await loadRepairsData();
      // Trigger workplan refresh if it exists
      if (window.populateWorkplanFromRepairs) window.populateWorkplanFromRepairs();
    });
  }

  function getFilteredAssetTypes() {
    const tree = state.lookupTree;
    if (!tree) return { companies: [], locationsByCompany: {}, assetTypesByLocation: {} };

    // Build assetTypesByLocation from the company-scoped structure
    const assetTypesByLocation = {};
    const assetsByCoLoc = tree.assetsByCompanyLocation || {};
    
    for (const [company, locMap] of Object.entries(assetsByCoLoc)) {
      for (const [location, assetTypes] of Object.entries(locMap)) {
        if (!assetTypesByLocation[location]) {
          assetTypesByLocation[location] = new Set();
        }
        assetTypes.forEach(at => assetTypesByLocation[location].add(at));
      }
    }
    
    // Convert sets to arrays
    Object.keys(assetTypesByLocation).forEach(loc => {
      assetTypesByLocation[loc] = Array.from(assetTypesByLocation[loc]);
    });
    
    return {
      companies: tree.companies || [],
      locationsByCompany: tree.locationsByCompany || {},
      assetTypesByLocation
    };
  }

  async function resolveSelectedRepairs() {
    if (repairsState.selectedRepairs.size === 0 && repairsState.selectedMaintenance.size === 0) {
      appAlert('No items selected to resolve');
      return;
    }
    
    const confirmed = await appConfirm(`Are you sure you want to resolve ${repairsState.selectedRepairs.size + repairsState.selectedMaintenance.size} selected items? This will permanently delete them.`);
    if (!confirmed) return;
    
    // Group by station for efficient deletion
    const byStation = new Map();
    [...repairsState.selectedRepairs, ...repairsState.selectedMaintenance].forEach(repair => {
      const key = `${repair.location}||${repair.assetType}||${repair.station_id}`;
      if (!byStation.has(key)) byStation.set(key, []);
      byStation.get(key).push(repair);
    });
    
    // Delete from each station's repairs
    for (const [key, repairs] of byStation.entries()) {
      const [location, assetType, stationId] = key.split('||');
      // Get all repairs for this station
      const allStationRepairs = repairsState.allRepairs.filter(r => 
        r.location === location && 
        r.assetType === assetType && 
        r.station_id === stationId
      );
      // Filter out the selected ones
      const remaining = allStationRepairs.filter(r => !repairs.includes(r));
      // Save the remaining repairs
      await window.electronAPI.saveRepairs('', stationId, remaining);
    }
    
    await loadRepairsData();
    if (window.populateWorkplanFromRepairs) window.populateWorkplanFromRepairs();
  }  

  function wireSelectAllCheckboxes() {
    const selectAllRepairs = $('#selectAllRepairs');
    const selectAllMaintenance = $('#selectAllMaintenance');
    
    if (selectAllRepairs) {
      selectAllRepairs.addEventListener('change', (e) => {
        $$('.repair-checkbox').forEach(cb => {
          cb.checked = e.target.checked;
          cb.dispatchEvent(new Event('change'));
        });
      });
    }
    
    if (selectAllMaintenance) {
      selectAllMaintenance.addEventListener('change', (e) => {
        $$('.maintenance-checkbox').forEach(cb => {
          cb.checked = e.target.checked;
          cb.dispatchEvent(new Event('change'));
        });
      });
    }
  }

  // ---- Tabs ----------------------------------------------------------------

  function bindTabs() {
    const tabOverview = $('#tabOverview');
    const tabAnalytics = $('#tabAnalytics');
    const tabRepairs = $('#tabRepairs');
    const paneOverview = $('#overviewTab');
    const paneAnalytics = $('#analyticsTab');
    const paneRepairs = $('#repairsTab');

    tabOverview.addEventListener('click', () => {
      tabOverview.classList.add('active');
      tabAnalytics.classList.remove('active');
      tabRepairs.classList.remove('active');
      paneOverview.style.display = '';
      paneAnalytics.style.display = 'none';
      paneRepairs.style.display = 'none';
    });

    tabAnalytics.addEventListener('click', () => {
      tabAnalytics.classList.add('active');
      tabOverview.classList.remove('active');
      tabRepairs.classList.remove('active');
      paneAnalytics.style.display = '';
      paneOverview.style.display = 'none';
      paneRepairs.style.display = 'none';
    });

    tabRepairs.addEventListener('click', async () => {
      tabRepairs.classList.add('active');
      tabOverview.classList.remove('active');
      tabAnalytics.classList.remove('active');
      paneRepairs.style.display = '';
      paneOverview.style.display = 'none';
      paneAnalytics.style.display = 'none';
      await loadRepairsData();
      wireSelectAllCheckboxes();
    });

  }

  // ---- Initialization -------------------------------------------------------

  async function refreshStatisticsView() {
    // If the stats DOM isn't loaded yet, skip silently (caller-safe).
    if (!hasStatsDOM()) return;
    try {
      const [rows, tree] = await Promise.all([
        window.electronAPI.getStationData({}),
        window.electronAPI.getLookupTree()
      ]);
      state.allStations = Array.isArray(rows) ? rows : [];
      state.lookupTree = tree || { companies: [], locationsByCompany: {} };
    } catch (e) {
      console.error('[statistics] refresh failed', e);
      state.allStations = [];
      state.lookupTree = { companies: [], locationsByCompany: {} };
    }
    // Re-render everything
    renderOverview();           // Overview = unfiltered
    applyAnalyticsFilters();    // Analytics = filtered
    state.cards.forEach(c => c.update());
  }
  // Expose globally so other flows can poke it after imports/adds
  window.refreshStatisticsView = refreshStatisticsView;

  async function initStatisticsView() {
    if (state.initialized) {
      // If already initialized and the DOM is present, just refresh data.
      await refreshStatisticsView();
      return;
    }
    state.initialized = true;

    bindTabs();

    // Wire up repairs buttons
    const btnAddRepair = $('#btnAddGlobalRepair');
    if (btnAddRepair) {
      btnAddRepair.addEventListener('click', openGlobalRepairModal);
    }

    const btnResolve = $('#btnResolveRepairs');
    if (btnResolve) {
      btnResolve.addEventListener('click', resolveSelectedRepairs);
    }

    // Wire + Add Statistic
    const addBtn = $('#btnAddStat');
    if (addBtn) {
      addBtn.addEventListener('click', (e) => openAddStatMenu(addBtn));
    }

    // First data load + paint
    await refreshStatisticsView();

    // Listen to filter changes
    const filterTree = $('#filterTree');
    if (filterTree) {
      filterTree.addEventListener('change', onFiltersChanged);
    }

    // Recompute on resize (charts)
    window.addEventListener('resize', () => {
      state.cards.forEach(c => c.update());
    });
  }

  // Expose init for index loader
  window.initStatisticsView = initStatisticsView;
})();

~~~

<!-- frontend/dashboard.html -->
<div id="statisticsPage" class="stats-view">
  <header class="stats-header">
    <h1>Dashboard</h1>
    <p class="stats-subtitle">Infrastructure monitoring and analysis</p>
  </header>

  <div class="stats-tabs">
    <button id="tabOverview" class="tab-button active" type="button">Overview</button>
    <button id="tabAnalytics" class="tab-button" type="button">Analytics</button>
    <button id="tabRepairs" class="tab-button" type="button">Repairs and Maintenance</button>
  </div>

  <!-- OVERVIEW (always uses ALL data; not affected by filters) -->
  <section id="overviewTab" class="stats-tab">
    <div class="stats-summary">
      <div class="summary-card">
        <div class="summary-title">Total Stations</div>
        <div id="ovTotalStations" class="summary-value">—</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">Total Locations</div>
        <div id="ovTotalLocations" class="summary-value">—</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">Total Companies</div>
        <div id="ovTotalCompanies" class="summary-value">—</div>
      </div>
    </div>

    <div class="split-columns">
      <div class="panel">
        <div class="panel-title">Totals by Location</div>
        <div id="ovByLocation" class="kv-list"><!-- filled by JS --></div>
      </div>

      <div class="panel">
        <div class="panel-title">Totals by Company</div>
        <div id="ovByCompany" class="kv-list"><!-- filled by JS --></div>
      </div>
    </div>
  </section>

  <!-- ANALYTICS (affected by the LHS filters) -->
  <section id="analyticsTab" class="stats-tab" style="display:none;">
    <div class="analytics-toolbar">
      <button id="btnAddStat" class="btn">+ Add Statistic</button>
      <div class="hint">
        Use the button to add a statistic. The filters on the left apply to this Analytics tab only
        (the Overview tab is always unfiltered).
      </div>
    </div>

    <div id="statsCards" class="stats-cards"><!-- dynamic stat cards --></div>
  </section>

  <!-- REPAIRS AND MAINTENANCE -->
  <section id="repairsTab" class="stats-tab" style="display:none;">
    <div class="repairs-toolbar">
      <button id="btnAddGlobalRepair" class="btn">+ Add Repair/Maintenance</button>
      <button id="btnResolveRepairs" class="btn btn-ghost">Resolve Selected</button>
    </div>

    <div class="repairs-tables">
      <!-- Repairs Table -->
      <div class="panel">
        <div class="panel-title">Repairs</div>
        <div class="table-scroll">
          <table class="data-table" id="globalRepairsTable">
            <thead>
              <tr>
                <th style="width:40px;">
                  <input type="checkbox" id="selectAllRepairs" title="Select all" />
                </th>
                <th>Date</th>
                <th>Station ID</th>
                <th>Location</th>
                <th>Asset Type</th>
                <th>Repair Name</th>
                <th>Severity</th>
                <th>Priority</th>
                <th>Cost</th>
                <th>Category</th>
                <th>Days</th>
              </tr>
            </thead>
            <tbody id="globalRepairsBody"></tbody>
          </table>
        </div>
        <!-- pagination will be inserted here by JS -->
      </div>

      <!-- Maintenance Table -->
      <div class="panel" style="margin-top:20px;">
        <div class="panel-title">Maintenance</div>
        <div class="table-scroll">
          <table class="data-table" id="globalMaintenanceTable">
            <thead>
              <tr>
                <th style="width:40px;">
                  <input type="checkbox" id="selectAllMaintenance" />
                </th>
                <th>Date</th>
                <th>Station ID</th>
                <th>Location</th>
                <th>Asset Type</th>
                <th>Item</th>
                <th>Severity</th>
                <th>Priority</th>
                <th>Cost</th>
                <th>Category</th>
                <th>Days</th>
              </tr>
            </thead>
            <tbody id="globalMaintenanceBody"></tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Add Repair Modal (defined in separate file) -->
    <div id="globalRepairModal" class="modal" style="display:none;">
      <!-- Content will be added by JS -->
    </div>
  </section>

  <!-- lightweight popup menu for + Add Statistic -->
  <div id="addStatMenu" class="stat-menu" style="display:none;">
    <button class="menu-item" data-kind="latlon">Latitude &amp; Longitude (radius count)</button>
    <button class="menu-item" data-kind="province">Province (bar chart)</button>
    <button class="menu-item" data-kind="inspection_frequency">Inspection Frequency (bar chart)</button>
    <div class="menu-sep"></div>
    <!-- Future stats hook -->
    <div class="menu-note">More statistics coming soon…</div>
  </div>
</div>

~~~

/* Ensure the repairs tab and containers are properly constrained */
.stats-view {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}

#repairsTab {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}

.repairs-tables {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}

/* Panel container */
.repairs-tables .panel {
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  box-sizing: border-box;
  margin-top: 0;
}

/* The key container for scrolling */
.table-scroll {
  width: 100%;
  max-width: 100%;
  max-height: 400px;
  overflow-x: auto;  /* Enable horizontal scrolling */
  overflow-y: auto;  /* Enable vertical scrolling */
  border: 1px solid var(--border-color, #ddd);
  border-radius: 4px;
  position: relative;
  box-sizing: border-box;
}

/* Set minimum width for the table to ensure it doesn't compress */
.data-table {
  min-width: 1200px;  /* Minimum width to trigger horizontal scroll */
  width: auto;        /* Allow table to expand based on content */
  border-collapse: collapse;
  font-size: 13px;
  table-layout: fixed;  /* Use fixed layout for better performance */
}

/* Sticky header for vertical scrolling */
.data-table thead {
  position: sticky;
  top: 0;
  background: var(--bg-secondary, #f5f5f5);
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* Column widths - adjust these based on your needs */
.data-table th,
.data-table td {
  padding: 8px 10px;
  text-align: left;
  border-bottom: 1px solid var(--border-light, #eee);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Specific column widths for better control */
.data-table th:nth-child(1),
.data-table td:nth-child(1) { width: 45px; }   /* Checkbox */
.data-table th:nth-child(2),
.data-table td:nth-child(2) { width: 100px; }  /* Date */
.data-table th:nth-child(3),
.data-table td:nth-child(3) { width: 120px; }  /* Station ID */
.data-table th:nth-child(4),
.data-table td:nth-child(4) { width: 150px; }  /* Location */
.data-table th:nth-child(5),
.data-table td:nth-child(5) { width: 150px; }  /* Asset Type */
.data-table th:nth-child(6),
.data-table td:nth-child(6) { width: 200px; }  /* Name/Item */
.data-table th:nth-child(7),
.data-table td:nth-child(7) { width: 100px; }  /* Severity */
.data-table th:nth-child(8),
.data-table td:nth-child(8) { width: 100px; }  /* Priority */
.data-table th:nth-child(9),
.data-table td:nth-child(9) { width: 120px; }  /* Cost */
.data-table th:nth-child(10),
.data-table td:nth-child(10) { width: 100px; } /* Category */
.data-table th:nth-child(11),
.data-table td:nth-child(11) { width: 80px; }  /* Days */

/* Header styling */
.data-table th {
  font-weight: 600;
  background: var(--bg-secondary, #f5f5f5);
  border-bottom: 2px solid var(--border-color, #ddd);
}

/* Row hover effect */
.data-table tbody tr:hover {
  background: var(--hover-bg, #f9f9f9);
}

/* Scrollbar styling for better visibility */
.table-scroll::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

.table-scroll::-webkit-scrollbar-track {
  background: var(--bg-light, #f1f1f1);
  border-radius: 4px;
}

.table-scroll::-webkit-scrollbar-thumb {
  background: var(--scrollbar-thumb, #888);
  border-radius: 4px;
}

.table-scroll::-webkit-scrollbar-thumb:hover {
  background: var(--scrollbar-thumb-hover, #555);
}

.table-scroll::-webkit-scrollbar-corner {
  background: var(--bg-light, #f1f1f1);
}

/* Pagination controls below table */
.pagination-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px;
  border-top: 1px solid var(--border-color, #ddd);
  background: var(--bg-secondary, #f9f9f9);
  width: 100%;
  box-sizing: border-box;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .table-scroll {
    max-height: 300px;
  }
  
  .data-table {
    font-size: 12px;
  }
  
  .data-table th,
  .data-table td {
    padding: 6px 8px;
  }
}

~~~

// frontend/js/add_infra.js - Updated with schema conformance on import
(function () {
  'use strict';

  // Utilities
  const debounce = (fn, ms = 150) => { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), ms); }; };
  const esc = (s) => String(s ?? '').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));

  // View helpers
  function isDocsActive() {
    const el = document.getElementById('dashboardContentContainer');
    return !!(el && el.style.display !== 'none' && el.offsetParent !== null);
  }
  function hideRightPanel() {
    const right = document.getElementById('rightPanel');
    if (right) right.style.display = 'none';
  }

  // ===== Virtualized table helper (windowing) =====
  function mountVirtualizedTable({
    rows,
    tbody,
    renderRowHTML,
    rowHeight = 44,
    overscan = 10,
    // NEW: only create a viewport when useful; otherwise shrink to content
    adaptiveHeight = true,
    maxViewport = 520,   // cap table height (px) when long
    minViewport = 0      // allow full shrink; set e.g. 120 if you want a floor
  }) {
    const topSpacer = document.createElement('tr');
    const bottomSpacer = document.createElement('tr');
    topSpacer.innerHTML = `<td colspan="999" style="height:0;padding:0;border:0"></td>`;
    bottomSpacer.innerHTML = `<td colspan="999" style="height:0;padding:0;border:0"></td>`;

    tbody.innerHTML = '';
    tbody.appendChild(topSpacer);
    tbody.appendChild(bottomSpacer);

    const scroller = tbody.closest('.table-scroll') || tbody.parentElement;
    let start = 0, end = 0, rafId = 0;

    const recompute = () => {
      rafId = 0;

      // Re-attach spacers if tbody got nuked
      if (topSpacer.parentNode !== tbody || bottomSpacer.parentNode !== tbody) {
        tbody.innerHTML = '';
        tbody.appendChild(topSpacer);
        tbody.appendChild(bottomSpacer);
      }

      // --- NEW: adaptive viewport sizing ---
      if (adaptiveHeight) {
        const table = tbody.closest('table');
        const headH = (table && table.tHead) ? table.tHead.offsetHeight || 0 : 0;
        const total = rows.length;
        const bodyH = Math.max(0, total) * rowHeight;
        const needed = headH + bodyH;                     // exact content height
        const target = Math.max(minViewport, Math.min(maxViewport, needed));
        // If data is short, we shrink; if long, we cap at maxViewport for scrolling.
        scroller.style.height = target + 'px';
        scroller.style.overflowY = 'auto';
        scroller.style.position = scroller.style.position || 'relative';
      }
      // -------------------------------------

      const viewH = scroller.clientHeight || 400;
      const scrollTop = scroller.scrollTop | 0;
      const total = rows.length;

      const first = Math.max(0, Math.floor(scrollTop / rowHeight) - overscan);
      const last  = Math.min(total, Math.ceil((scrollTop + viewH) / rowHeight) + overscan);
      if (first === start && last === end) return;
      start = first; end = last;

      topSpacer.firstElementChild.style.height = (start * rowHeight) + 'px';
      bottomSpacer.firstElementChild.style.height = ((rows.length - end) * rowHeight) + 'px';

      // clear current slice
      while (topSpacer.nextSibling && topSpacer.nextSibling !== bottomSpacer) {
        tbody.removeChild(topSpacer.nextSibling);
      }

      const frag = document.createDocumentFragment();
      for (let i = start; i < end; i++) {
        const tr = document.createElement('tr');
        tr.dataset.index = i;
        tr.innerHTML = renderRowHTML(rows[i], i);
        frag.appendChild(tr);
      }
      tbody.insertBefore(frag, bottomSpacer);
    };

    const onScroll = () => { if (!rafId) rafId = requestAnimationFrame(recompute); };
    scroller.addEventListener('scroll', onScroll, { passive: true });
    window.addEventListener('resize', onScroll);
    recompute();
    requestAnimationFrame(recompute);
    setTimeout(recompute, 0);

    return {
      update(newRows) {
        rows = newRows || [];
        start = -1; end = -1;
        recompute();
        requestAnimationFrame(recompute);
      },
      refresh() { recompute(); },
      destroy() {
        scroller.removeEventListener('scroll', onScroll);
        window.removeEventListener('resize', onScroll);
        if (rafId) cancelAnimationFrame(rafId);
        // Let the page flow naturally when we tear down
        if (adaptiveHeight) scroller.style.height = '';
      }
    };
  }

  // ===== RHS Panel Restoration Functions =====
  function restoreRHSPanel() {
    // Do NOT restore while docs/optimization is active or suppression flag set
    if (isDocsActive() || document.body?.dataset?.suppressRhs === '1') {
      hideRightPanel();
      return;
    }
    const rightPanel = document.getElementById('rightPanel');
    const stationContentContainer = document.getElementById('stationContentContainer');
    
    // If station view is hidden/not active and RHS panel exists
    if (rightPanel && stationContentContainer && 
        (stationContentContainer.style.display === 'none' || !stationContentContainer.style.display)) {
      
      // Show the RHS panel
      rightPanel.style.display = '';
      
      // Reset the RHS title to default state
      if (typeof setRhsTitle === 'function') {
        setRhsTitle('Station Details');
      }
      
      // Clear any stale content
      const container = document.getElementById('station-details');
      if (container) {
        container.innerHTML = '<p><em>Click a pin to see details</em></p>';
      }
    }
  }

  function safeEnableFullWidthMode() {
    try {
      if (typeof window.enableFullWidthMode === 'function') return window.enableFullWidthMode();
      const main = document.getElementById('mainContent'); if (main) main.classList.add('full-width');
    } catch (_) {}
  }
  function safeDisableFullWidthMode() {
    try {
      if (typeof window.disableFullWidthMode === 'function') return window.disableFullWidthMode();
      const main = document.getElementById('mainContent'); if (main) main.classList.remove('full-width');
    } catch (_) {}
  }

  // Nav helpers
  function setActiveNav(activeId) {
    try {
      document.querySelectorAll('.left-panel .nav-item').forEach(li => li.classList.remove('active'));
      const el = document.getElementById(activeId);
      if (el) el.classList.add('active');
    } catch (_) {}
  }

  async function showUsersView() {
    setActiveNav('navUsers');
    showViews({ map: false, list: false, docs: false, wizard: false, settings: false, users: true });
    safeEnableFullWidthMode();

    const container = document.getElementById('usersContainer');
    if (!container) return;

    if (!container.dataset.loaded) {
      try {
        const resp = await fetch('users.html');
        if (!resp.ok) throw new Error('HTTP ' + resp.status);
        container.innerHTML = await resp.text();
        container.dataset.loaded = '1';
        if (window.initUsersView) requestAnimationFrame(() => window.initUsersView());
      } catch (e) {
        console.error('[showUsersView] failed to load users.html:', e);
        container.innerHTML = `
          <div id="usersPage" class="users-view">
            <h2>Users</h2>
            <p>Failed to load users.</p>
          </div>`;
      }
    } else {
      if (window.initUsersView) window.initUsersView();
    }
  }

  function showViews({ map = false, list = false, docs = false, wizard = false, settings = false }) {
    const mapEl      = document.getElementById('mapContainer');
    const listEl     = document.getElementById('listContainer');
    const docsEl     = document.getElementById('dashboardContentContainer');
    const wizardWrap = document.getElementById('addInfraContainer');
    const settingsEl = document.getElementById('settingsContainer');
    const stationEl  = document.getElementById('stationContentContainer');
    const statsEl    = document.getElementById('statisticsContainer');
    const rightToggleBtn = document.getElementById('toggleRight');
    const rightPanel = document.getElementById('rightPanel');
    const usersEl    = document.getElementById('usersContainer');

    if (mapEl)      mapEl.style.display      = map    ? 'block' : 'none';
    if (listEl)     listEl.style.display     = list   ? 'block' : 'none';
    if (docsEl)     docsEl.style.display     = docs   ? 'block' : 'none';
    if (wizardWrap) wizardWrap.style.display = wizard ? 'block' : 'none';
    if (settingsEl) settingsEl.style.display = settings ? 'block' : 'none';
    if (statsEl)    statsEl.style.display    = arguments[0]?.stats ? 'block' : 'none';
    if (usersEl)    usersEl.style.display    = arguments[0]?.users ? 'block' : 'none';

    if (stationEl && (map || list || docs || wizard || settings || arguments[0]?.stats || arguments[0]?.users))
      stationEl.style.display = 'none';

    // Hide the right toggle while on Optimization (docs), show it otherwise
    if (rightToggleBtn) rightToggleBtn.style.display = docs ? 'none' : '';

    // Suppress RHS while in docs; allow restore in other views
    if (docs) {
      document.body.dataset.suppressRhs = '1';
      hideRightPanel();
    } else {
      delete document.body.dataset.suppressRhs;
    }
  }

  async function showMapView() {
    setActiveNav('navMap');
    showViews({ map: true, list: false, docs: false, wizard: false, settings: false });
    safeDisableFullWidthMode();

    // Leaving docs: allow RHS to restore again
    delete document.body.dataset.suppressRhs;

    // Restore RHS panel when returning to map view
    restoreRHSPanel();

    if (window.map && typeof window.map.invalidateSize === 'function') {
      setTimeout(() => { try { window.map.invalidateSize(); } catch(_) {} }, 50);
    }
    if (typeof window.refreshMarkers === 'function') setTimeout(() => window.refreshMarkers(), 0);
  }

  async function showListView() {
    setActiveNav('navList');
    showViews({ map: false, list: true, docs: false, wizard: false, settings: false });
    safeDisableFullWidthMode();

    // Leaving docs: allow RHS to restore again
    delete document.body.dataset.suppressRhs;

    // Restore RHS panel when returning to list view
    restoreRHSPanel();

    const listEl = document.getElementById('listContainer');
    if (!listEl) return;

    if (!listEl.dataset.loaded) {
      try {
        const resp = await fetch('list.html');
        if (!resp.ok) throw new Error('HTTP ' + resp.status);
        listEl.innerHTML = await resp.text();
        listEl.dataset.loaded = '1';
        if (window.initListView) requestAnimationFrame(() => window.initListView());
      } catch (e) {
        console.error('[showListView] failed to load list.html:', e);
        listEl.innerHTML = `
          <div id="listPage" class="list-view">
            <div class="list-toolbar" style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
              <h2 style="margin:0;font-size:1rem;">Stations</h2>
              <div id="listCount" class="badge" style="display:none;"></div>
            </div>
            <div class="table-scroll">
              <table id="stationTable" class="data-table">
                <thead>
                  <tr>
                    <th>Station ID</th>
                    <th>Category</th>
                    <th>Site Name</th>
                    <th>Province</th>
                    <th>Latitude</th>
                    <th>Longitude</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <p class="hint" style="opacity:.75;margin-top:.5rem;">Tip: Click a column header to sort. Hover a row to see details on the right. Click to open full details.</p>
          </div>`;
        if (window.initListView) requestAnimationFrame(() => window.initListView());
      }
    } else {
      if (window.initListView) window.initListView();
    }
  }

  async function showSettingsView() {
    setActiveNav('navSettings');
    showViews({ map: false, list: false, docs: false, wizard: false, settings: true });
    safeDisableFullWidthMode();

    const container = document.getElementById('settingsContainer');
    if (!container) return;

    if (!container.dataset.loaded) {
      try {
        const resp = await fetch('settings.html');
        if (!resp.ok) throw new Error('HTTP ' + resp.status);
        container.innerHTML = await resp.text();
        container.dataset.loaded = '1';
        if (window.initSettingsView) requestAnimationFrame(() => window.initSettingsView());
      } catch (e) {
        console.error('[showSettingsView] failed to load settings.html:', e);
        container.innerHTML = `
          <div id="settingsPage" class="settings-view">
            <h2>Settings</h2>
            <p>Failed to load settings.</p>
          </div>`;
        if (window.initSettingsView) requestAnimationFrame(() => window.initSettingsView());
      }
    } else {
      if (window.initSettingsView) window.initSettingsView();
    }
  }

  async function showOptView() {
    setActiveNav('navOpt');
    showViews({ map: false, list: false, docs: true, wizard: false, settings: false });
    // Optimization/dashboard docs should be full-width; no RHS gutter
    safeEnableFullWidthMode();
    hideRightPanel();
    if (!document.getElementById('dashboardContentContainer')) showMapView();
  }

  async function showStatisticsView() {
    setActiveNav('navDash'); // "Statistics" has become "Dashboard"
    showViews({ map: false, list: false, docs: false, wizard: false, settings: false, stats: true });
    safeEnableFullWidthMode();

    // Optional: hide RHS panel content while in full-width stats view
    try {
      const right = document.getElementById('rightPanel');
      if (right) right.style.display = '';
    } catch(_) {}

    const container = document.getElementById('statisticsContainer');
    if (!container) return;

    if (!container.dataset.loaded) {
      try {
        const resp = await fetch('dashboard.html');
        if (!resp.ok) throw new Error('HTTP ' + resp.status);
        container.innerHTML = await resp.text();
        container.dataset.loaded = '1';
        if (window.initStatisticsView) requestAnimationFrame(() => window.initStatisticsView());
      } catch (e) {
        console.error('[showStatisticsView] failed to load dashboard.html:', e);
        container.innerHTML = `<div class="panel"><div class="panel-title">Statistics</div><p>Failed to load.</p></div>`;
      }
    } else if (window.initStatisticsView) {
      window.initStatisticsView();
    }
  }

  // Panel host helpers
  function showPanel(html) {
    const container = document.getElementById('addInfraContainer');
    if (!container) return null;
    container.innerHTML = html;
    showViews({ map:false, list:false, docs:false, wizard:true, settings:false });
    safeEnableFullWidthMode();
    setActiveNav('navNewCompany');
    return container;
  }
  function closePanel() {
    const container = document.getElementById('addInfraContainer');
    if (container) container.innerHTML = '';
    showViews({ map:true, list:false, docs:false, wizard:false, settings:false });
    safeDisableFullWidthMode();
    if (window.map && typeof window.map.invalidateSize === 'function') {
      setTimeout(() => { try { window.map.invalidateSize(); } catch(_) {} }, 50);
    }
  }

  // Create Company panel
  async function openCreateCompanyForm() {
    const view = `
      <div class="panel-form">
        <h2 style="margin-top:0;">Create Company</h2>
        <div class="form-row">
          <label>Company Name*</label>
          <input type="text" id="coName" placeholder="Company name..." />
        </div>
        <div class="form-row">
          <label>Company Description</label>
          <textarea id="coDesc" rows="4" placeholder=""></textarea>
        </div>
        <div class="form-row">
          <label>Company Email*</label>
          <input type="email" id="coEmail" placeholder="" />
        </div>
        <div class="wizard-footer" style="justify-content:flex-end;">
          <button id="btnCancel" class="btn btn-ghost">Cancel</button>
          <button id="btnSave" class="btn btn-primary">Save</button>
        </div>
      </div>`;
    const host = showPanel(view);
    if (!host) return;

    const $ = sel => host.querySelector(sel);
    $('#btnCancel')?.addEventListener('click', () => closePanel());
    $('#btnSave')?.addEventListener('click', async () => {
      const name = ($('#coName')?.value || '').trim();
      if (!name) return appAlert('Please enter a company name.');
      try {
        const res = await window.electronAPI.upsertCompany(name, true);
        if (!res || res.success === false) return appAlert('Failed to create company.');
        await window.refreshFilters?.();
        closePanel();
      } catch (e) {
        console.error('[CreateCompany] failed', e); appAlert('Unexpected error.');
      }
    });
  }

  // Create Project/Location
  async function openCreateLocationForm(company) {
    const view = `
      <div class="panel-form">
        <h2 style="margin-top:0;">Create Project/Location</h2>
        <div class="form-row">
          <label>Company</label>
          <input type="text" value="${(company||'')}" disabled />
        </div>
        <div class="form-row">
          <label>Location*</label>
          <input type="text" id="locName" placeholder="Location name..." />
        </div>
        <div class="form-row">
          <label>Base folder link (optional)</label>
          <input type="text" id="locLink" placeholder="\\\\\\server\\share\\Stations  or  C:\\\\Users\\\\name\\\\Stations" />
          <div class="hint" style="opacity:.75;margin-top:.25rem;">
            Use the same format as your current base (UNC path or absolute Windows path).
          </div>
        </div>
        <div class="wizard-footer" style="justify-content:flex-end;">
          <button id="btnCancel" class="btn btn-ghost">Cancel</button>
          <button id="btnSave" class="btn btn-primary">Save</button>
        </div>
      </div>`;
    const host = showPanel(view);
    if (!host) return;

    const $ = sel => host.querySelector(sel);
    $('#btnCancel')?.addEventListener('click', () => closePanel());
    $('#btnSave')?.addEventListener('click', async () => {
      const loc = ($('#locName')?.value || '').trim();
      if (!loc) return appAlert('Please enter a location.');
      try {
        const res = await window.electronAPI.upsertLocation(loc, company);
        // Only proceed if upsert succeeded
        if (!res || res.success === false) return appAlert('Failed to create location.');
        // Save optional link (if any) after upsert succeeds
        const link = ($('#locLink')?.value || '').trim();
        if (link) {
          try {
            await window.electronAPI.setLocationLink(company, loc, link);
          } catch (_) {
            /* non-fatal */
          }
        }
        await window.refreshFilters?.();
        closePanel();
      } catch (e) {
        console.error('[CreateLocation] failed', e); appAlert('Unexpected error.');
      }
    });
  }

  // Manual Instance Wizard
  async function openManualInstanceWizard(company, location, assetType) {
    const view = `
      <div class="panel-form" id="manualPanel">
        <h2 style="margin-top:0;">Add ${assetType ? `“${assetType}”` : 'Asset'} Manually</h2>
        <div class="card">
          <div class="card-title">Context</div>
          <div class="kv">
            <div><strong>Company:</strong> ${company || '—'}</div>
            <div><strong>Location / Province:</strong> ${location || '—'}</div>
            <div><strong>Asset Type (Category):</strong> ${assetType || '—'}</div>
          </div>
        </div>

        <!-- Step 1: General -->
        <div id="mStep1" class="wizard-step active">
          <h3>General Information</h3>
          <div class="form-row">
            <label>Station ID*</label>
            <input type="text" id="mStationId" placeholder="e.g., 12345" />
          </div>
          <div class="form-row">
            <label>Site Name*</label>
            <input type="text" id="mSiteName" placeholder="e.g., River Bridge" />
          </div>
          <div class="form-row">
            <label>Latitude*</label>
            <input type="text" id="mLat" placeholder="e.g., 49.2827" />
          </div>
          <div class="form-row">
            <label>Longitude*</label>
            <input type="text" id="mLon" placeholder="e.g., -123.1207" />
          </div>
          <div class="form-row">
            <label>Status*</label>
            <select id="mStatus">
              <option value="ACTIVE">ACTIVE</option>
              <option value="INACTIVE">INACTIVE</option>
              <option value="MOTHBALLED">MOTHBALLED</option>
              <option value="UNKNOWN">UNKNOWN</option>
            </select>
          </div>
        </div>

        <!-- Step 2: Sections editor (ALWAYS editing) -->
        <div id="mStep2" class="wizard-step" style="display:none;">
          <h3>Additional Sections & Fields</h3>
          <p class="hint" style="margin-top:.25rem;">
            Add a <strong>Section</strong>, then add <strong>Fields</strong> inside it. Values are optional.
          </p>

          <div id="mSectionsEditor"></div>

          <div class="main-actions" style="margin-top:.5rem;">
            <button id="mAddSection" class="btn">+ Add Section</button>
          </div>
        </div>

        <div class="wizard-footer" style="justify-content:flex-end;">
          <button id="mCancel" class="btn btn-ghost">Cancel</button>
          <button id="mBack" class="btn btn-ghost" disabled>Back</button>
          <button id="mNext" class="btn btn-primary">Next</button>
          <button id="mSave" class="btn btn-primary" style="display:none;">Save</button>
        </div>
      </div>`;
    const host = showPanel(view);
    if (!host) return;

    const $ = sel => host.querySelector(sel);
    const sectionsHost = $('#mSectionsEditor');

    // ── Helpers (no edit toggle; sections start and remain in editing) ──
    function createFieldRow(fieldName, value) {
      const fieldDiv = document.createElement('div');
      fieldDiv.className = 'field-row';
      fieldDiv.dataset.fieldName = fieldName || '';

      const labelInput = document.createElement('input');
      labelInput.type = 'text';
      labelInput.className = 'field-label-input';
      labelInput.value = fieldName || '';
      labelInput.placeholder = 'Field name';

      const valueInput = document.createElement('input');
      valueInput.type = 'text';
      valueInput.className = 'field-value-input';
      valueInput.value = value || '';
      valueInput.placeholder = 'Enter value…';

      const delBtn = document.createElement('button');
      delBtn.className = 'btn btn-ghost btn-sm btn-danger edit-only';
      delBtn.textContent = '✕';
      delBtn.title = 'Delete Field';
      delBtn.addEventListener('click', async () => {
        const ok = await appConfirm('Delete this field?');
        if (!ok) return;
        fieldDiv.remove();
      });

      fieldDiv.appendChild(labelInput);
      fieldDiv.appendChild(valueInput);
      fieldDiv.appendChild(delBtn);
      return fieldDiv;
    }

    function addFieldToSection(sectionDiv) {
      const fieldsContainer = sectionDiv.querySelector('.section-fields');
      const newField = createFieldRow('New Field', '');
      fieldsContainer.appendChild(newField);
      const label = newField.querySelector('.field-label-input');
      label.focus(); label.select();
    }

    async function deleteSection(sectionDiv) {
      const title = sectionDiv.querySelector('.section-title-input')?.value?.trim() || 'this section';
      const ok = await appConfirm(`Delete "${title}"?`);
      if (!ok) return;
      sectionDiv.remove();
    }

    function createSection(sectionName, fieldsObj = {}) {
      const sectionDiv = document.createElement('div');
      sectionDiv.className = 'station-section editable-section editing'; // ← ALWAYS editing

      const headerDiv = document.createElement('div');
      headerDiv.className = 'section-header';
      headerDiv.style.display = 'flex';
      headerDiv.style.justifyContent = 'space-between';
      headerDiv.style.alignItems = 'center';

      const titleInput = document.createElement('input');
      titleInput.type = 'text';
      titleInput.className = 'section-title-input';
      titleInput.value = sectionName || 'New Section';
      titleInput.placeholder = 'Section name';

      const actionsDiv = document.createElement('div');
      actionsDiv.className = 'section-actions';

      // No edit toggle button — just show edit-only controls all the time
      const addFieldBtn = document.createElement('button');
      addFieldBtn.className = 'btn btn-ghost btn-sm edit-only';
      addFieldBtn.textContent = '+ Add Field';
      addFieldBtn.addEventListener('click', () => addFieldToSection(sectionDiv));

      const deleteSectionBtn = document.createElement('button');
      deleteSectionBtn.className = 'btn btn-danger btn-sm edit-only';
      deleteSectionBtn.textContent = 'Delete Section';
      deleteSectionBtn.title = 'Delete Section';
      deleteSectionBtn.addEventListener('click', () => deleteSection(sectionDiv));

      actionsDiv.appendChild(addFieldBtn);
      actionsDiv.appendChild(deleteSectionBtn);

      headerDiv.appendChild(titleInput);
      headerDiv.appendChild(actionsDiv);

      const fieldsDiv = document.createElement('div');
      fieldsDiv.className = 'section-fields';

      Object.entries(fieldsObj || {}).forEach(([fname, val]) => {
        fieldsDiv.appendChild(createFieldRow(fname, val));
      });

      sectionDiv.appendChild(headerDiv);
      sectionDiv.appendChild(fieldsDiv);
      return sectionDiv;
    }

    function addNewSection() {
      const s = createSection('New Section', {});
      sectionsHost.appendChild(s);
      const title = s.querySelector('.section-title-input');
      title.focus(); title.select();
    }

    // ── Nav bindings ──
    $('#mCancel').addEventListener('click', () => closePanel());

    $('#mNext').addEventListener('click', () => {
      const stationId = ($('#mStationId')?.value || '').trim();
      const siteName  = ($('#mSiteName')?.value || '').trim();
      const lat       = ($('#mLat')?.value || '').trim();
      const lon       = ($('#mLon')?.value || '').trim();
      if (!stationId || !siteName || !lat || !lon) {
        return appAlert('Please fill Station ID, Site Name, Latitude, and Longitude.');
      }
      if (isNaN(Number(lat)) || isNaN(Number(lon))) {
        return appAlert('Latitude and Longitude must be numeric.');
      }

      // switch steps
      $('#mStep1').style.display = 'none';
      $('#mStep1').classList.remove('active');
      $('#mStep2').style.display = '';
      $('#mStep2').classList.add('active');
      $('#mBack').disabled = false;
      $('#mNext').style.display = 'none';
      $('#mSave').style.display = '';

      // start with one empty section to guide users
      if (!sectionsHost.children.length) addNewSection();
    });

    $('#mBack').addEventListener('click', () => {
      $('#mStep2').style.display = 'none';
      $('#mStep2').classList.remove('active');
      $('#mStep1').style.display = '';
      $('#mStep1').classList.add('active');
      $('#mBack').disabled = true;
      $('#mNext').style.display = '';
      $('#mSave').style.display = 'none';
    });

    $('#mAddSection').addEventListener('click', addNewSection);

    // ── Save: same payload shape as before ──
    $('#mSave').addEventListener('click', async () => {
      const payload = {
        company,
        location,
        assetType,
        general: {
          stationId: ($('#mStationId')?.value || '').trim(),
          siteName:  ($('#mSiteName')?.value || '').trim(),
          lat:       ($('#mLat')?.value || '').trim(),
          lon:       ($('#mLon')?.value || '').trim(),
          status:    ($('#mStatus')?.value || 'UNKNOWN').trim()
        },
        extras: []
      };

      if (!payload.general.stationId || !payload.general.siteName || !payload.general.lat || !payload.general.lon) {
        return appAlert('General Information is incomplete.');
      }
      if (isNaN(Number(payload.general.lat)) || isNaN(Number(payload.general.lon))) {
        return appAlert('Latitude and Longitude must be numeric.');
      }

      // Gather sections/fields
      const sectionEls = Array.from(sectionsHost.querySelectorAll('.editable-section'));
      for (const sec of sectionEls) {
        const sectionTitle = sec.querySelector('.section-title-input')?.value?.trim() || '';
        const fieldRows = Array.from(sec.querySelectorAll('.field-row'));
        for (const row of fieldRows) {
          const fld = row.querySelector('.field-label-input')?.value?.trim() || '';
          const val = row.querySelector('.field-value-input')?.value?.trim() || '';
          if (!sectionTitle && !fld && !val) continue;
          if (!sectionTitle || !fld) {
            return appAlert('Each field requires both a Section name and a Field name.');
          }
          payload.extras.push({ section: sectionTitle, field: fld, value: val });
        }
      }

      try {
        $('#mSave').disabled = true;
        $('#mSave').textContent = 'Saving…';
        const res = await window.electronAPI.manualCreateInstance(payload);
        if (!res || res.success === false) {
          appAlert(res?.message || 'Failed to create instance.');
          return;
        }
        if (typeof window.electronAPI.invalidateStationCache === 'function') {
          await window.electronAPI.invalidateStationCache();
        }
        await window.refreshFilters?.();
        await window.refreshMarkers?.();
        await window.renderList?.();
        await window.refreshStatisticsView?.();
        appAlert('Asset created.');
        closePanel();
      } catch (e) {
        console.error('[manualCreate] failed', e);
        appAlert('Unexpected error while creating the asset.');
      } finally {
        $('#mSave').disabled = false;
        $('#mSave').textContent = 'Save';
      }
    });
  }

  // Import MORE for an existing Asset Type — opens NEW window if available
  async function openImportMoreForAsset(company, location, assetType) {
    if (window.electronAPI && typeof window.electronAPI.openImportMoreWindow === 'function') {
      try { await window.electronAPI.openImportMoreWindow({ company, location, assetType }); } catch (_) {}
      return;
    }

    // Fallback: in-panel importer
    const view = `
      <div class="panel-form" id="importMorePanel">
        <h2 style="margin-top:0;">Import more into “${assetType || 'Asset'}”</h2>

        <div class="card">
          <div class="card-title">Context</div>
          <div class="kv">
            <div><strong>Company:</strong> ${company || '—'}</div>
            <div><strong>Location / Province:</strong> ${location || '—'}</div>
            <div><strong>Asset Type (Category):</strong> ${assetType || '—'}</div>
          </div>
        </div>

        <div class="form-row">
          <label>Excel File</label>
          <div class="filepicker">
            <input type="file" id="imExcel" accept=".xlsx,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
            <span id="imExcelLabel">Select Excel File</span>
          </div>
        </div>

        <div class="form-row">
          <label>Select sheet</label>
          <select id="imSheet" disabled>
            <option>Select Excel file first</option>
          </select>
        </div>

        <hr style="margin:1rem 0;">

        <h3>Select data</h3>
        <div class="table-toolbar">
          <div>
            <button id="imSelectAll" class="btn btn-ghost">Select all</button>
            <button id="imDeselectAll" class="btn btn-ghost">Deselect all</button>
          </div>
          <div id="imCount" class="badge">0 selected</div>
        </div>

        <div class="table-scroll">
          <table id="imTable" class="data-table">
            <thead></thead>
            <tbody></tbody>
          </table>
        </div>

        <div class="wizard-footer" style="justify-content:flex-end;">
          <button id="imCancel" class="btn btn-ghost">Cancel</button>
          <button id="imImport" class="btn btn-primary" disabled>Import Selected</button>
        </div>
      </div>`;
    const host = showPanel(view);
    if (!host) return;

    const $ = sel => host.querySelector(sel);
    const thead = $('#imTable thead');
    const tbody = $('#imTable tbody');

    const state = {
      excelB64: null,
      sheets: [],
      selectedSheet: null,
      headers: [],
      sections: [],
      rows: [],
      selectedIdx: new Set()
    };

    let vtIM = null;
    let bound = false;

    function updateBadge() { $('#imCount').textContent = `${state.selectedIdx.size} selected`; }
    function setButtons() { $('#imImport').disabled = !(state.rows && state.rows.length && state.selectedIdx.size); }
    function setHeaderTriState() {
      const chkAll = thead.querySelector('#imChkAll');
      if (!chkAll) return;
      const total = state.rows.length;
      const sel = state.selectedIdx.size;
      chkAll.checked = sel > 0 && sel === total;
      chkAll.indeterminate = sel > 0 && sel < total;
    }

    function renderTable() {
      const scroller = tbody.closest('.table-scroll');
      // Ensure we have a nice empty note element right before the scroller
      let empty = host.querySelector('#imEmptyNote');
      if (!empty) {
        empty = document.createElement('div');
        empty.id = 'imEmptyNote';
        empty.className = 'empty-note';
        empty.textContent = 'Select an Excel file and sheet to preview rows.';
        scroller.parentNode.insertBefore(empty, scroller);
      }

      thead.innerHTML = '';
      // Do NOT clear tbody if a virtualizer exists; otherwise we drop its spacers.
      if (!vtIM) tbody.innerHTML = '';

      if (!state.rows.length) {
        // Hide table entirely; show empty note
        scroller.classList.add('is-hidden');
        empty.classList.add('show');

        // Tear down any existing virtualizer to free DOM
        if (vtIM) { vtIM.destroy(); vtIM = null; }
        tbody.innerHTML = '';             // keep it truly empty
        updateBadge(); setButtons();       // 0 selected
        return;
      }

      // We have data: show table, hide note
      scroller.classList.remove('is-hidden');
      empty.classList.remove('show');

      // section header
      const trSec = document.createElement('tr');
      const thLead = document.createElement('th');
      thLead.style.width = '36px';
      thLead.innerHTML = '<input id="imChkAll" type="checkbox"/>';
      trSec.appendChild(thLead);

      let i = 0;
      while (i < state.headers.length) {
        const sec = state.sections[i] || '';
        let span = 1;
        while (i + span < state.headers.length && (state.sections[i + span] || '') === sec) span++;
        const th = document.createElement('th');
        th.colSpan = span;
        th.textContent = sec || '';
        trSec.appendChild(th);
        i += span;
      }
      thead.appendChild(trSec);

      // field header
      const trFld = document.createElement('tr');
      trFld.innerHTML = '<th></th>' + state.headers.map(h => `<th>${esc(h)}</th>`).join('');
      thead.appendChild(trFld);

      const chkAll = thead.querySelector('#imChkAll');
      if (chkAll) {
        chkAll.addEventListener('change', () => {
          state.selectedIdx = chkAll.checked ? new Set(state.rows.map((_, i) => i)) : new Set();
          updateBadge(); setHeaderTriState(); setButtons(); vtIM?.refresh();
        });
      }

      // default all selected
      state.selectedIdx = new Set(state.rows.map((_, idx) => idx));

      const renderRowHTML = (row, i) => {
        const checked = state.selectedIdx.has(i) ? 'checked' : '';
        let cells = `<td><input type="checkbox" class="imRowChk" ${checked}></td>`;
        for (let idx = 0; idx < state.headers.length; idx++) {
          const h = state.headers[idx];
          const sec = state.sections[idx] || '';
          const key = sec ? `${sec} – ${h}` : h;
          const val = (row?.[key] ?? row?.[h] ?? '');
          cells += `<td>${esc(val)}</td>`;
        }
        return cells;
      };

      if (!vtIM) {
        vtIM = mountVirtualizedTable({
          rows: state.rows,
          tbody,
          renderRowHTML,
          rowHeight: 44,
          overscan: 10,
          adaptiveHeight: true,  // <-- key line
          maxViewport: 520,
          minViewport: 0
        });
      } else {
        vtIM.update(state.rows);
      }

      requestAnimationFrame(() => vtIM && vtIM.refresh());

      if (!bound) {
        bound = true;
        tbody.addEventListener('change', (e) => {
          const t = e.target;
          if (!(t instanceof HTMLInputElement) || !t.classList.contains('imRowChk')) return;
          const tr = t.closest('tr'); if (!tr) return;
          const idx = Number(tr.dataset.index); if (Number.isNaN(idx)) return;
          if (t.checked) state.selectedIdx.add(idx); else state.selectedIdx.delete(idx);
          updateBadge(); setHeaderTriState(); setButtons();
        });
      }

      updateBadge(); setHeaderTriState(); setButtons();
    }

    async function buildPreview() {
      if (!state.excelB64 || !state.selectedSheet) {
        state.rows = [];
        renderTable();
        return;
      }
      try {
        const res = await window.electronAPI.excelParseRowsFromSheet(state.excelB64, state.selectedSheet);
        if (!res || res.success === false) {
          console.error('[importMore] parseRowsFromSheet failed:', res?.message);
          state.rows = [];
          renderTable();
          return;
        }
        state.rows = res.rows || [];
        state.headers = res.headers || (state.rows.length ? Object.keys(state.rows[0]) : []);
        state.sections = res.sections || state.headers.map(() => '');
        renderTable();
      } catch (e) {
        console.error('[importMore] buildPreview error', e);
        state.rows = [];
        renderTable();
      }
    }

    $('#imCancel').addEventListener('click', () => closePanel());
    $('#imSelectAll').addEventListener('click', () => {
      state.selectedIdx = new Set(state.rows.map((_, i) => i));
      updateBadge(); setHeaderTriState(); setButtons(); vtIM?.refresh();
    });
    $('#imDeselectAll').addEventListener('click', () => {
      state.selectedIdx.clear();
      updateBadge(); setHeaderTriState(); setButtons(); vtIM?.refresh();
    });

    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const rdr = new FileReader();
        rdr.onload = () => {
          const s = String(rdr.result || '');
          const i = s.indexOf(',');
          resolve(i >= 0 ? s.slice(i + 1) : s);
        };
        rdr.onerror = reject;
        rdr.readAsDataURL(file);
      });
    }

    function populateSheetSelect(names) {
      const sel = $('#imSheet');
      sel.innerHTML = '';
      if (!names || !names.length) {
        sel.appendChild(new Option('No sheets detected', '', true, true));
        sel.disabled = true;
        return;
      }
      names.forEach((n, i) => sel.appendChild(new Option(n, n, i === 0, i === 0)));
      sel.disabled = false;
      state.selectedSheet = sel.value || null;
    }

    $('#imExcel').addEventListener('change', async (e) => {
      const f = (e.target.files || [])[0];
      if (!f) {
        state.excelB64 = null; state.sheets = []; populateSheetSelect([]); renderTable(); return;
      }
      $('#imExcelLabel').textContent = f.name || 'Selected Excel';
      try {
        state.excelB64 = await fileToBase64(f);
        const res = await window.electronAPI.excelListSheets(state.excelB64);
        state.sheets = (res && res.sheets) || [];
        populateSheetSelect(state.sheets);
        await buildPreview();
      } catch (err) {
        console.error('[importMore] list sheets failed', err);
        populateSheetSelect([]); renderTable();
      }
    });

    $('#imSheet').addEventListener('change', async () => {
      state.selectedSheet = $('#imSheet').value || null;
      await buildPreview();
    });

    $('#imImport').addEventListener('click', async () => {
      const idxs = Array.from(state.selectedIdx.values()).sort((a, b) => a - b);
      if (!idxs.length) return appAlert('Please select at least one row.');
      try {
        $('#imImport').textContent = 'Importing…';
        $('#imImport').disabled = true;
        const selectedRowsRaw = idxs.map(i => state.rows[i]).filter(Boolean);
        // Normalize GI: ensure Category (from assetType) and Province (from location) exist when missing
        const selectedRows = selectedRowsRaw.map((r) => {
          const row = { ...r };
          const hasCat = (row['Category'] ?? row['category'] ?? row['General Information – Category'])?.toString()?.trim();
          if (!hasCat && assetType) {
            row['Category'] = assetType;
            row['General Information – Category'] = assetType;
          }
          const hasProv = (row['Province'] ?? row['province'] ?? row['General Information – Province'])?.toString()?.trim();
          if (!hasProv && location) {
            row['Province'] = location;
            row['General Information – Province'] = location;
          }
          return row;
        });
        const payload = {
          location,
          company,
          sheetName: state.selectedSheet || 'Data',
          sections: state.sections,
          headers: state.headers,
          rows: selectedRows,
          assetType
        };
        const res = await window.electronAPI.importSelection(payload);
        if (!res || res.success === false) return appAlert(res?.message || 'Import failed.');
        if (typeof window.electronAPI.invalidateStationCache === 'function') {
          await window.electronAPI.invalidateStationCache();
        }
        await window.refreshFilters?.();
        await window.refreshMarkers?.();
        await window.renderList?.();
        await window.refreshStatisticsView?.();
        appAlert(`Successfully imported ${res.added} row(s) into “${assetType}”.`);
        closePanel();
      } catch (e) {
        console.error('[importMore] import failed', e);
        appAlert('Unexpected import error. See console.');
      } finally {
        $('#imImport').textContent = 'Import Selected';
        setButtons();
      }
    });

    // initial empty render
    renderTable();
  }

  // Create Assets - Updated with schema conformance + virtualization
  async function openCreateAssetsWizard(company, location) {
    const view = `
      <div class="panel-form" id="assetsPanel">
        <h2 style="margin-top:0;">Create Assets</h2>

        <div class="card">
          <div class="card-title">Context</div>
          <div class="kv">
            <div><strong>Company:</strong> ${company || '—'}</div>
            <div><strong>Location:</strong> ${location || '—'}</div>
          </div>
        </div>

        <div class="form-row">
          <label>Asset Name*</label>
          <input type="text" id="assetName2" placeholder="Enter asset name" />
        </div>

        <div class="form-row">
          <label>Base folder link (optional)</label>
          <input type="text" id="assetLink2" placeholder="\\\\server\\share\\folder" />
          <div class="hint" style="opacity:.75;margin-top:.25rem;">
            If provided, this link will be used for this asset type at this location (overrides the location link).
          </div>
        </div>

        <div class="form-row">
          <label>Excel File</label>
          <div class="filepicker">
            <input type="file" id="excelFile2" accept=".xlsx,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
            <span id="excelFile2Label">Select Excel File</span>
          </div>
        </div>

        <div class="form-row">
          <label>Select sheet</label>
          <select id="sheetSelect2" disabled>
            <option>Select Excel file first</option>
          </select>
        </div>

        <hr style="margin:1rem 0;">

        <h3>Select data</h3>
        <div class="table-toolbar">
          <div>
            <button id="btnSelectAll2" class="btn btn-ghost">Select all</button>
            <button id="btnDeselectAll2" class="btn btn-ghost">Deselect all</button>
          </div>
          <div id="rowCount2" class="badge">0 selected</div>
        </div>

        <div class="table-scroll">
          <table id="previewTable2" class="data-table">
            <thead></thead>
            <tbody></tbody>
          </table>
        </div>

        <div class="wizard-footer" style="justify-content:flex-end;">
          <button id="btnCancel2" class="btn btn-ghost">Cancel</button>
          <button id="btnImport2" class="btn btn-primary" disabled>Import Selected</button><button id="btnManual2" class="btn btn-ghost" style="margin-left:.5rem;">Create Manually…</button>
        </div>
      </div>`;
    const host = showPanel(view);
    if (!host) return;

    const $ = sel => host.querySelector(sel);
    const thead = $('#previewTable2 thead');
    const tbody = $('#previewTable2 tbody');

    const state = {
      excelB64: null,
      sheets: [],
      selectedSheet: null,
      headers: [],
      sections: [],
      rows: [],
      selectedIdx: new Set()
    };

    let vt2 = null;
    let bound = false;

    // Save per-asset-type link if the user provided one
    async function saveAssetTypeLinkIfAny(assetName) {
      const link = (host.querySelector('#assetLink2')?.value || '').trim();
      if (!link || !assetName) return;
      try { await window.electronAPI.setAssetTypeLink(assetName, company, location, link); }
      catch (_) {}
    }

    function updateBadge() { $('#rowCount2').textContent = `${state.selectedIdx.size} selected`; }
    function setButtonsState() {
      const hasExcel = !!(state.rows && state.rows.length);
      $('#btnImport2').disabled = !hasExcel || !state.selectedIdx.size;
      $('#btnManual2').disabled = !($('#assetName2')?.value || '').trim();
    }
    function setHeaderTriState() {
      const chkAll = thead.querySelector('#chkAll2');
      if (!chkAll) return;
      const total = state.rows.length;
      const sel = state.selectedIdx.size;
      chkAll.checked = sel > 0 && sel === total;
      chkAll.indeterminate = sel > 0 && sel < total;
    }

    function renderTable() {
      const scroller = tbody.closest('.table-scroll');
      let empty = host.querySelector('#caEmptyNote');
      if (!empty) {
        empty = document.createElement('div');
        empty.id = 'caEmptyNote';
        empty.className = 'empty-note';
        empty.textContent = 'Select an Excel file and sheet to preview rows.';
        scroller.parentNode.insertBefore(empty, scroller);
      }

      thead.innerHTML = '';
      if (!vt2) tbody.innerHTML = '';

      if (!state.rows.length) {
        scroller.classList.add('is-hidden');
        empty.classList.add('show');
        if (vt2) { vt2.destroy(); vt2 = null; }
        tbody.innerHTML = '';
        updateBadge(); setButtonsState();
        return;
      }

      scroller.classList.remove('is-hidden');
      empty.classList.remove('show');

      // section header
      const trSec = document.createElement('tr');
      const thLead = document.createElement('th');
      thLead.style.width = '36px';
      thLead.innerHTML = '<input id="chkAll2" type="checkbox"/>';
      trSec.appendChild(thLead);

      let i = 0;
      while (i < state.headers.length) {
        const sec = state.sections[i] || '';
        let span = 1;
        while (i + span < state.headers.length && (state.sections[i + span] || '') === sec) span++;
        const th = document.createElement('th');
        th.colSpan = span;
        th.textContent = sec || '';
        trSec.appendChild(th);
        i += span;
      }
      thead.appendChild(trSec);

      // field header
      const trFld = document.createElement('tr');
      trFld.innerHTML = '<th></th>' + state.headers.map(h => `<th>${esc(h)}</th>`).join('');
      thead.appendChild(trFld);

      const chkAll = thead.querySelector('#chkAll2');
      if (chkAll) {
        chkAll.addEventListener('change', () => {
          state.selectedIdx = chkAll.checked ? new Set(state.rows.map((_, i) => i)) : new Set();
          updateBadge(); setHeaderTriState(); setButtonsState(); vt2?.refresh();
        });
      }

      state.selectedIdx = new Set(state.rows.map((_, idx) => idx));

      const renderRowHTML = (row, i) => {
        const checked = state.selectedIdx.has(i) ? 'checked' : '';
        let cells = `<td><input type="checkbox" class="rowchk2" ${checked}></td>`;
        for (let idx = 0; idx < state.headers.length; idx++) {
          const h = state.headers[idx];
          const sec = state.sections[idx] || '';
          const key = sec ? `${sec} – ${h}` : h;
          const val = (row?.[key] ?? row?.[h] ?? '');
          cells += `<td>${esc(val)}</td>`;
        }
        return cells;
      };

      if (!vt2) {
        vt2 = mountVirtualizedTable({
          rows: state.rows,
          tbody,
          renderRowHTML,
          rowHeight: 44,
          overscan: 10,
          adaptiveHeight: true, // <-- key line
          maxViewport: 520,
          minViewport: 0
        });
      } else {
        vt2.update(state.rows);
      }
      requestAnimationFrame(() => vt2 && vt2.refresh());

      if (!bound) {
        bound = true;
        tbody.addEventListener('change', (e) => {
          const t = e.target;
          if (!(t instanceof HTMLInputElement) || !t.classList.contains('rowchk2')) return;
          const tr = t.closest('tr'); if (!tr) return;
          const idx = Number(tr.dataset.index); if (Number.isNaN(idx)) return;
          if (t.checked) state.selectedIdx.add(idx); else state.selectedIdx.delete(idx);
          updateBadge(); setHeaderTriState(); setButtonsState();
        });
      }

      updateBadge(); setHeaderTriState(); setButtonsState();
    }

    async function buildPreview() {
      if (!state.excelB64 || !state.selectedSheet) {
        state.rows = [];
        renderTable();
        return;
      }
      try {
        const res = await window.electronAPI.excelParseRowsFromSheet(state.excelB64, state.selectedSheet);
        if (!res || res.success === false) {
          console.error('[assets] parseRowsFromSheet failed:', res?.message);
          state.rows = [];
          renderTable();
          return;
        }
        state.rows = res.rows || [];
        state.headers = res.headers || (state.rows.length ? Object.keys(state.rows[0]) : []);
        state.sections = res.sections || state.headers.map(() => '');
        renderTable();
      } catch (e) {
        console.error('[assets] buildPreview error', e);
        state.rows = [];
        renderTable();
      }
    }

    // Bind UI
    $('#btnCancel2')?.addEventListener('click', () => closePanel());
    $('#btnSelectAll2')?.addEventListener('click', () => {
      state.selectedIdx = new Set(state.rows.map((_, i) => i));
      updateBadge(); setHeaderTriState(); setButtonsState(); vt2?.refresh();
    });
    $('#btnDeselectAll2')?.addEventListener('click', () => {
      state.selectedIdx.clear();
      updateBadge(); setHeaderTriState(); setButtonsState(); vt2?.refresh();
    });

    host.querySelector('#assetName2')?.addEventListener('input', setButtonsState);

    $('#btnManual2')?.addEventListener('click', async () => {
      const assetName = ($('#assetName2')?.value || '').trim();
      if (!assetName) return appAlert('Please enter an asset name first.');
      // Save optional per-asset-type link before opening manual wizard
      await saveAssetTypeLinkIfAny(assetName);
      openManualInstanceWizard(company, location, assetName);
    });

    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const rdr = new FileReader();
        rdr.onload = () => {
          const s = String(rdr.result || '');
          const i = s.indexOf(',');
          resolve(i >= 0 ? s.slice(i + 1) : s);
        };
        rdr.onerror = reject;
        rdr.readAsDataURL(file);
      });
    }

    function populateSheetSelect(names) {
      const sel = $('#sheetSelect2');
      sel.innerHTML = '';
      if (!names || !names.length) {
        sel.appendChild(new Option('No sheets detected', '', true, true));
        sel.disabled = true;
        return;
      }
      names.forEach((n, i) => sel.appendChild(new Option(n, n, i===0, i===0)));
      sel.disabled = false;
      state.selectedSheet = sel.value || null;
    }

    $('#excelFile2')?.addEventListener('change', async (e) => {
      const f = (e.target.files || [])[0];
      if (!f) {
        state.excelB64 = null; state.sheets = []; populateSheetSelect([]); renderTable(); return;
      }
      $('#excelFile2Label').textContent = f.name || 'Selected Excel';
      try {
        state.excelB64 = await fileToBase64(f);
        const res = await window.electronAPI.excelListSheets(state.excelB64);
        state.sheets = (res && res.sheets) || [];
        populateSheetSelect(state.sheets);
        await buildPreview();
      } catch (err) {
        console.error('[assets] list sheets failed', err);
        populateSheetSelect([]); renderTable();
      }
    });

    $('#sheetSelect2')?.addEventListener('change', async () => {
      state.selectedSheet = $('#sheetSelect2').value || null;
      await buildPreview();
    });

    $('#btnImport2')?.addEventListener('click', async () => {
      const assetName = ($('#assetName2')?.value || '').trim();
      if (!assetName) return appAlert('Please enter an asset name.');
      if (!state.rows.length) return appAlert('No rows to import (select a sheet).');
      const idxs = Array.from(state.selectedIdx.values()).sort((a,b) => a-b);
      if (!idxs.length) return appAlert('Please select at least one row.');

      try {
        $('#btnImport2').textContent = 'Importing...';
        $('#btnImport2').disabled = true;

        // Persist optional per-asset-type link before creating/upserting type
        await saveAssetTypeLinkIfAny(assetName);

        const up = await window.electronAPI.upsertAssetType(assetName, company, location);
        if (!up || up.success === false) return appAlert('Failed to create asset type.');

        const selectedRowsRaw = idxs.map(i => state.rows[i]).filter(Boolean);
        // Normalize GI for "no sections" sources
        const selectedRows = selectedRowsRaw.map((r) => {
          const row = { ...r };
          const hasCat = (row['Category'] ?? row['category'] ?? row['General Information – Category'])?.toString()?.trim();
          if (!hasCat && assetName) {
            row['Category'] = assetName;
            row['General Information – Category'] = assetName;
          }
          const hasProv = (row['Province'] ?? row['province'] ?? row['General Information – Province'])?.toString()?.trim();
          if (!hasProv && location) {
            row['Province'] = location;
            row['General Information – Province'] = location;
          }
          return row;
        });

        const payload = {
          location,
          company,
          sheetName: state.selectedSheet || 'Data',
          sections: state.sections,
          headers: state.headers,
          rows: selectedRows,
          assetType: assetName,
        };

        const res = await window.electronAPI.importSelection(payload);
        if (!res || res.success === false) {
          appAlert('Import failed.');
          return;
        }

        if (typeof window.invalidateStationData === 'function') window.invalidateStationData();
        if (typeof window.electronAPI.invalidateStationCache === 'function') {
          await window.electronAPI.invalidateStationCache();
        }
        await window.refreshFilters?.();
        await window.refreshMarkers?.();
        await window.renderList?.();
        await window.refreshStatisticsView?.();
        
        appAlert(`Successfully imported ${res.added} row(s). Data will be synchronized with existing ${assetName} schema if applicable.`);
        closePanel();

      } catch (e) {
        console.error('[assets] import failed', e);
        appAlert('Unexpected import error. See console.');
      } finally {
        $('#btnImport2').textContent = 'Import Selected';
        setButtonsState();
      }
    });

    // initial empty render
    renderTable();
  }

  // Bootstrapping & Nav bindings
  document.addEventListener('DOMContentLoaded', () => {
    // Monitor station container visibility changes
    const stationContainerObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
          const container = mutation.target;
          // If station container was just hidden, restore RHS panel
          if (container.style.display === 'none' || !container.style.display) {
            // Skip restoration while docs active or explicitly suppressed
            if (!isDocsActive() && document.body?.dataset?.suppressRhs !== '1') {
              restoreRHSPanel();
            }
          }
        }
      });
    });
    
    const stationContainer = document.getElementById('stationContentContainer');
    if (stationContainer) {
      stationContainerObserver.observe(stationContainer, {
        attributes: true,
        attributeFilter: ['style']
      });
    }
    
    // Initial restoration check
    if (!isDocsActive()) restoreRHSPanel();

    const navNewCompany = document.getElementById('navNewCompany');
    if (navNewCompany && !navNewCompany.dataset.boundNew) {
      navNewCompany.addEventListener('click', (e) => {
        e.preventDefault();
        openCreateCompanyForm();
      });
      navNewCompany.dataset.boundNew = '1';
    }

    const navMap  = document.getElementById('navMap');
    const navList = document.getElementById('navList');
    const navOpt  = document.getElementById('navOpt');
    const navDash = document.getElementById('navDash');
    const navSettings = document.getElementById('navSettings');

    if (navMap && !navMap.dataset.bound) {
      navMap.addEventListener('click', (e) => { e.preventDefault(); showMapView(); });
      navMap.dataset.bound = '1';
    }
    if (navList && !navList.dataset.bound) {
      navList.addEventListener('click', (e) => { e.preventDefault(); showListView(); });
      navList.dataset.bound = '1';
    }
    if (navOpt && !navOpt.dataset.bound) {
      navOpt.addEventListener('click', (e) => { e.preventDefault(); showOptView(); });
      navOpt.dataset.bound = '1';
    }
    if (navDash && !navDash.dataset.bound) {
      navDash.addEventListener('click', (e) => { e.preventDefault(); showStatisticsView(); });
      navDash.dataset.bound = '1';
    }
    if (navSettings && !navSettings.dataset.bound) {
      navSettings.addEventListener('click', (e) => { e.preventDefault(); showSettingsView(); });
      navSettings.dataset.bound = '1';
    }

    const navUsers = document.getElementById('navUsers');
    const navLogout = document.getElementById('navLogout');
    
    if (navUsers && !navUsers.dataset.bound) {
      navUsers.addEventListener('click', (e) => { e.preventDefault(); showUsersView(); });
      navUsers.dataset.bound = '1';
    }
    
    if (navLogout && !navLogout.dataset.bound) {
      navLogout.addEventListener('click', async (e) => { 
        e.preventDefault();
        const confirmed = await appConfirm('Are you sure you want to logout?');
        if (confirmed) {
          await window.electronAPI.logoutUser();
          window.close();
        }
      });
      navLogout.dataset.bound = '1';
    }

  });

  // Expose for filters.js [+] actions
  window.openCreateCompanyForm  = window.openCreateCompanyForm  || openCreateCompanyForm;
  window.openCreateLocationForm = window.openCreateLocationForm || openCreateLocationForm;
  window.openCreateAssetsWizard = window.openCreateAssetsWizard || openCreateAssetsWizard;
  window.openManualInstanceWizard = window.openManualInstanceWizard || openManualInstanceWizard;
  window.openImportMoreForAsset = window.openImportMoreForAsset || openImportMoreForAsset;

  // Also expose view switches
  window.showMapView   = window.showMapView   || showMapView;
  window.showListView  = window.showListView  || showListView;
  window.showOptView  = window.showOptView  || showOptView;
  window.showStatisticsView = window.showStatisticsView || showStatisticsView;
  window.showSettingsView = window.showSettingsView || showSettingsView;

})();

~~~

Generate all the fixes as code diffs